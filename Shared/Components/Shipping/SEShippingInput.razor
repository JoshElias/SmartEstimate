@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using SMART.Common.CompanyManagement
@using Daemon.RazorUI.Input
@using SmartEstimate.Models

@inject ShipLocationStore ShipLocationStore
@inject ILogger<ShippingOptions> Logger

@namespace SmartEstimate.Shared.Components


<ShippingOptions />

@if(_project!.IsShipped) {
  <div class="flex flex-col">
    <div class="border-t border-gray-300 mb-4 mt-2"></div>

    <div class="flex flex-col">
      <DmnComboBox 
        Label="Shipping Address"
        Class="pb-0"
        Options=@_shipLocationOptions 
        @bind-Value=@_currentShipLocationLinkId
        @onchange=@OnShipLocationChanged
      />
      @if(!_isAddingShipLocation) {
        <span 
          onclick=@OnAddressClick
          class="
            text-sky-500
            font-semibold
            hover:text-sky-400
            cursor-pointer
            pt-0.5
        ">
          Add New Address
        </span>
      }
    </div>
    <div class="mb-4"></div>

    @if(!_isAddingShipLocation && _project!.ProjectShipLocation is null) {
      <span>No Current Shipping Address</span>
    } else if(_isAddingShipLocation) {
      <SEShipLocationForm 
        ShipLocation=@_project!.ProjectShipLocation
        OnCancel=@OnShipLocationCancel 
        OnCreate=@OnShipLocationCreate
      />
    } else {
      <h3>Current Shipping Address</h3>
      <SEShipLocationView ShipLocation=@_project!.ProjectShipLocation />
    }
  </div>
}


@code {

  private ProjectView? _project { get; set; }
  private ShipLocationView? _shipLocation { get; set; }

  [CascadingParameter]
  public EditContext? EditContext { get; set; }

  private IQueryable<ShipLocationView>? _shipLocations;
  private IQueryable<DmnSelectOption>? _shipLocationOptions;
  private string? _currentShipLocationLinkId;
  

  private bool _isAddingShipLocation = false;
    
      
  protected override async Task OnInitializedAsync() {
    _project = EditContext!.Model as ProjectView;
    _currentShipLocationLinkId = _project!.ProjectShipLocation?.LinkID;
    _shipLocations = await ShipLocationStore.ReadableStore.Get(true);
    _shipLocationOptions = _shipLocations.Select(
      sl => new DmnSelectOption {
        Value = sl.LinkID,
        Label = sl.LocationName
      }
    );
    EditContext.OnFieldChanged += OnFieldChanged;
  }

  void OnFieldChanged(object? sender, FieldChangedEventArgs e) {
    StateHasChanged();
  }

  private void OnAddressClick(MouseEventArgs e) {
    _isAddingShipLocation = true;
    StateHasChanged();
  }
  
  private void OnShipLocationCancel() {
    _isAddingShipLocation = false;
    StateHasChanged();
  }

  private void OnShipLocationCreate(ShipLocationView shipLocation) {
    _project!.ProjectShipLocation = shipLocation;
    _isAddingShipLocation = false;
    StateHasChanged();
  }      

  private void OnShipLocationChanged(ChangeEventArgs e) {
    _currentShipLocationLinkId = e.Value?.ToString();
    Logger.LogInformation($"ShipLocationChanged: {_currentShipLocationLinkId}");
    StateHasChanged();
  }  
}