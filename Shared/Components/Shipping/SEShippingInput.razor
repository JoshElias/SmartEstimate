@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Forms
@using SMART.Common.CompanyManagement
@using Daemon.RazorUI.Input
@using SmartEstimate.Models

@inject ShipLocationStore ShipLocationStore
@inject ILogger<ShippingOptions> Logger

@namespace SmartEstimate.Shared.Components


<ShippingOptions />

@if(_project!.IsShipped) {
  <div class="border-t border-gray-300 mb-4"></div>
  
  // Display Read Only View of Ship Location
  @if(_project!.ProjectShipLocation is not null && !IsAddingShipLocation) {
    <SEShipLocationView ShipLocation=@_project!.ProjectShipLocation />
  } else {
    <SEShipLocationForm ShipLocation=@_project!.ProjectShipLocation/>
  }
}




@code {

  private ProjectView? _project { get; set; }
  private ShipLocationView? _shipLocation { get; set; }

  [CascadingParameter]
  public EditContext? EditContext { get; set; }

  private IQueryable<ShipLocationView>? ShipLocations;
  private bool IsAddingShipLocation = false;
    
      
  protected override async Task OnInitializedAsync() {
    _project = EditContext!.Model as ProjectView;
    _shipLocation = (_project?.ProjectShipLocation is not null)
      ? _project.ProjectShipLocation
      : new ShipLocationView("");
    ShipLocations = await ShipLocationStore.ReadableStore.Get();
    EditContext.OnFieldChanged += OnFieldChanged;
  }

  private void OnFieldChanged(object? sender, FieldChangedEventArgs e) {
    StateHasChanged();
  }
}