@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using SMART.Common.CompanyManagement
@using Daemon.RazorUI.Input
@using SmartEstimate.Models

@inject ShipLocationStore ShipLocationStore
@inject ILogger<ShippingOptions> Logger

@namespace SmartEstimate.Shared.Components


<ShippingOptions />

@if(_project!.IsShipped) {
  <div class="flex flex-col">
    <div class="border-t border-gray-300 mb-4"></div>

      <div class="flex flex-col">
        <h3>Change Address</h3>
        <button disabled>Address ComboBox</button>
        <span onclick=@OnAddressClick>Add New Address</span>
      </div>

    @if(!IsAddingShipLocation && _project!.ProjectShipLocation is null) {
      <span>No Current Shipping Address</span>
    } else if(IsAddingShipLocation) {
      <h3>Adding New Shipping Address</h3>
      <SEShipLocationForm ShipLocation=@_project!.ProjectShipLocation />
    } else {
      <h3>Current Shipping Address</h3>
      <SEShipLocationView ShipLocation=@_project!.ProjectShipLocation />
    }
  </div>
}



@code {

  private ProjectView? _project { get; set; }
  private ShipLocationView? _shipLocation { get; set; }

  [CascadingParameter]
  public EditContext? EditContext { get; set; }

  private IQueryable<ShipLocationView>? ShipLocations;
  private bool IsAddingShipLocation = false;
    
      
  protected override async Task OnInitializedAsync() {
    _project = EditContext!.Model as ProjectView;
    _shipLocation = (_project?.ProjectShipLocation is not null)
      ? _project.ProjectShipLocation
      : new ShipLocationView("");
    ShipLocations = await ShipLocationStore.ReadableStore.Get();
    EditContext.OnFieldChanged += OnFieldChanged;
  }

  private void OnFieldChanged(object? sender, FieldChangedEventArgs e) {
    StateHasChanged();
  }

  private void OnAddressClick(MouseEventArgs e) {
    IsAddingShipLocation = true;
    StateHasChanged();
  }
}