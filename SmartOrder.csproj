<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <Version>0.2.2</Version>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>9cdec653-23e1-486d-8377-fa7decc71749</UserSecretsId>
    <GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>
    <NoWarn>1591</NoWarn>
    <NoWarn>$(NoWarn);NETSDK1057</NoWarn>
  </PropertyGroup>

  <!-- Third Party Dependencies -->
  <ItemGroup>
    <PackageReference Include="Auth0.AspNetCore.Authentication" Version="1.4.1" />
    <PackageReference Include="AutoMapper" Version="12.0.1" />
    <PackageReference Include="Microsoft.AspNetCore.Components.DataAnnotations.Validation" Version="3.*-*" />
    <PackageReference Include="Microsoft.AspNetCore.Components.QuickGrid" Version="8.*" />
    <PackageReference Include="System.Drawing.Common" Version="8.*" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="SMART.Common">
      <HintPath>lib/SMART.Common.dll</HintPath>
    </Reference>
  </ItemGroup>

  <!-- Internal Dependencies -->
  <ItemGroup Condition="'$(Configuration)'!='Release'">
    <ProjectReference Include="../SmartOrderApi/SmartOrderApi/SmartOrderApi.csproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)'=='Release'">
    <PackageReference Include="SmartOrderApi" Version="*" />
  </ItemGroup>

  <!--
    Use local node_modules binaries if they exist.

    If there is another directory, say in the CI/CD environment, that tailwindcss
    is stored, then we should add another <Exec> to this block with the condition
    that it only run when `'$(CI)' == 'true'`.  That will ensure that this can find
    the bin anytime
   -->
  <Target Name="UseLocalNodeModules" Condition="Exists('node_modules/.bin')">
    <Exec Command="export PATH=&quot;$(MSBuildProjectDirectory)/node_modules/.bin:$PATH&quot;"  />
  </Target>

  <!-- Integrate TailwindCSS -->
  <ItemGroup>
    <!--
      This gives us a list of files we can process in a loop later
      Ultimately, we get an `IItemList[]` collection of files that are
      found under `./Styles` with a `.css` extension.  For each item in the list, a
      property, `OutputPath`, will be attached, using `RecursiveDir` to maintain the
      directory structure that was found below `./Styles`
    -->
    <CssStyles Include="./Styles/**/*.css">
      <!-- %(RecursiveDir): The directory traversed during wildcard expansion -->
      <!-- The other two are probably self-explanatory -->
      <OutputPath>./wwwroot/css/%(RecursiveDir)%(Filename)%(Extension)</OutputPath>
    </CssStyles>
  </ItemGroup>

  <PropertyGroup>
    <TailwindCssPath>/usr/local/bin/tailwindcss</TailwindCssPath>
  </PropertyGroup>

  <Target Name="FindTailwindCss" DependsOnTargets="UseLocalNodeModules">
      <Exec Command="where tailwindcss" ConsoleToMSBuild="true" Condition="'$(OS)' == 'Windows_NT'">
        <Output TaskParameter="ConsoleOutput" PropertyName="TailwindCssPath" />
      </Exec>
      <Exec Command="command -v tailwindcss" ConsoleToMSBuild="true" Condition="'$(OS)' != 'Windows_NT'">
        <Output TaskParameter="ConsoleOutput" PropertyName="TailwindCssPath" />
      </Exec>
  </Target>

  <Target
    Name="ProcessScopedCssFilesWithTailwind"
    AfterTargets="_GenerateScopedCssFiles"
  >
    <MSBuild
      Projects="$(MSBuildProjectFile)"
      Properties="CurrentScopedCssFile=%(_ScopedCssOutputs.Identity)"
      Targets="ProcessScopedCssFileWithTailwind"
    >
    </MSBuild>
  </Target>

  <Target
    Name="ProcessScopedCssFileWithTailwind"
    DependsOnTargets="FindTailwindCss"
  >
    <Message
      Importance="high"
      Text="Processing with Tailwind: $(CurrentScopedCssFile)"
    />
    <Exec
      Command="$(TailwindCssPath) -i $(CurrentScopedCssfile) -o $(CurrentScopedCssFile)"
      WorkingDirectory="$(MSBuildProjectDirectory)"
    />
  </Target>

  <!-- Normal build process -->
  <Target
    Name="CleanTailwindCss"
    BeforeTargets="PreBuildEvent"
  >
    <Exec
      Command="rm -f ./wwwroot/css/*.css"
      WorkingDirectory="$(MSBuildProjectDirectory)"
    />
  </Target>

  <Target
    Name="BuildTailwindCss"
    BeforeTargets="PreBuildEvent"
    DependsOnTargets="CleanTailwindCss;FindTailwindCss;"
    Inputs="@(CssStyles)"
    Outputs="%(CssStyles.OutputPath)"
  >
    <Exec
      Command="$(TailwindCssPath) build -i %(CssStyles.Identity) -o %(CssStyles.OutputPath)"
      WorkingDirectory="$(MSBuildProjectDirectory)"
    />
  </Target>

  <!-- run tailwindcss watch process by using `dotnet watch run` (or just `dotnet watch`)-->
  <!-- <Target
    Name="Watch TailwindCss"
    BeforeTargets="PreBuildEvent"
    DependsOnTargets="FindTailwindCss"
    Condition="'$(DotNetWatchBuild)' == 'true'"
  >
    <Exec Command="$(TailwindCssPath) build -i ./Styles/site.css -o ./wwwroot/css/site.css -w" />
  </Target> -->
</Project>
