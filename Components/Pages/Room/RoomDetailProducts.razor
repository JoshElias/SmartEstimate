@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

@namespace SmartEstimate.Pages

@inject NavigationManager NavigationManager
@inject ModalService ModalService
@inject ILogger<RoomDetailProducts> Logger


<DmnSectionHeader 
    Title="Products"
    Subtitle="What's a room without some products?"
    SubmitButtonText="Add Product"
    OnSubmitClick=@OnClick
    Class="mb-6"
/>
<QuickGrid Items=Products>
    <TemplateColumn               
        Title="ID"
        SortBy=@_sortByName
        Sortable=true 
    >
        <NavLink href=@($"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}/products/{context.LinkID}")>
            @context.LinkID
        </NavLink>
    </TemplateColumn>
    <TemplateColumn               
        Title="Code"
        SortBy=@_sortByName
        Sortable=true 
    >
        <NavLink href=@($"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}/products/{context.LinkID}")>
            @context.ProductCode
        </NavLink>
    </TemplateColumn>
    <PropertyColumn 
        Title="Qty"
        Property=@(p => p.Quantity)
    />
    <PropertyColumn 
        Title="Width"
        Property=@(p => p.Width) 
    />
    <PropertyColumn 
        Title="Height"
        Property=@(p => p.Height)
    />
    <PropertyColumn 
        Title="Depth"
        Property=@(p => p.Depth)
    />
    <PropertyColumn 
        Title="Left"
        Property=@(p => p.ProductLeftSide)
    />
    <PropertyColumn 
        Title="Right"
        Property=@(p => p.ProductRightSide)
    />
    <PropertyColumn 
        Title="Price"
        Property=@(p => p.PriceLibrary)
    />
    @* <PropertyColumn 
        Title="EXT"
        Property=@(p => p.EXT)
    /> *@
    <PropertyColumn 
        Title="Comments"
        Property=@(p => p.Comments)
    />
    <TemplateColumn 
        Class="flex gap-x-2 justify-end"
    >
        <button @onclick=@(() => DeleteProduct(context.LinkID))>
            <TrashIcon Props=@(new IconProps() {
                Class=@"
                    w-[22px]
                    cursor-pointer 
                    stroke-gray-400
                    hover:stroke-rose-500 
                    duration-300 
                    ease-in-out
                " 
            }) />
        </button>         
    </TemplateColumn>
</QuickGrid>
@if(!Products.Any()) {
    <div class="flex justify-center">
        <div class="text-gray-400 text-2xl">
            No products found
        </div>
    </div>
}
    


@code {
    [Parameter]
    public string ProjectLinkId { get; set; }

    [Parameter]
    public string ProjectGroupLinkId { get; set; }

    [Parameter]
    public IQueryable<ProductView> Products { get; set; } 
        = new List<ProductView>().AsQueryable();

    private GridSort<ProductView> _sortByName = GridSort<ProductView>
        .ByAscending(p => p.Name);

    private ModalContentProps _deleteConfirmationInput;
    private string? _itemIdToDelete;

    protected override void OnInitialized() {
        _deleteConfirmationInput = new ModalContentProps {
            Title = "Delete Product",
            Description = "Are you sure you want to delete this product?",
            IconType = typeof(TrashIcon),
            IconProps = new IconProps() { Class = "stroke-red-500" },
            IconBackgroundClass = "bg-red-100",
            ButtonClass = "bg-red-500 hover:bg-red-400",
            OnConfirm = OnDeleteConfirm 
        };
    }


    private void OnClick()
    {
        NavigationManager
            .NavigateTo(
                $"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}/products"
            );
    }

    private void DeleteProduct(string productLinkId) {
        _itemIdToDelete = productLinkId;
        ModalService!.Show(_deleteConfirmationInput);
    }

    private async Task OnDeleteConfirm(bool confirmed) {
        ModalService!.Hide();
    }
}