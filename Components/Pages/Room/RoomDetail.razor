@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

@namespace SmartEstimate.Pages

@page "/quotes/{quoteId:int}/rooms/{roomId:int}"
 

@inject QuoteStore _quoteStore
 

<RoomDetailNav 
    Options=@(new List<NavOptionProps> {
        new NavOptionProps { Path = "/quotes", Label = "What?" },
        new NavOptionProps { Path = $"/quotes/{QuoteId}", Label = _quote.Name },
        new NavOptionProps { Path = $"/quotes/{QuoteId}/rooms/{RoomId}", Label = _room.Name }
    }) 
/>
<div class="flex flex-1 flex-col">
  <div class="border-t border-gray-300"></div>
   
   @if(IsLoading) {
        <Spinner Class="text-stone-400 dark:text-stone-400 fill-orange-600" />
    } else {

        <div class="container h-full flex flex-col">
            <div class="md:flex md:items-center md:justify-between my-6">
                <div class="min-w-0 flex-1">
                    <h2 class="
                        text-2xl font-bold
                        leading-7 text-gray-900 
                        sm:truncate sm:text-3xl 
                        sm:tracking-tight
                    ">
                        @_room.Name
                    </h2>
                </div>
                <div class="mt-4 flex md:ml-4 md:mt-0">
                    <button type="button" class="ml-3 inline-flex items-center rounded-md bg-sky-500 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-sky-300 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-500">Save</button>
                </div>
            </div>

            <form class="border-none mb-8">
                <ul role="list" class="grid grid-cols-1 gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4">
                        @foreach (var prop in @_roomProfileProps)
                    {
                        <li class="col-span-1 flex flex-col divide-y divide-gray-200 rounded-lg bg-white text-center shadow">
                            <RoomProfileProperty Title=@prop.Title />
                        </li>
                    }
                </ul>
            </form>

            <RoomDetailProducts 
                Products=@_products 
                QuoteId=@QuoteId
                RoomId=@RoomId
            />
        </div>
    }
</div>


@code {
    [Parameter]
    public int QuoteId { get; set; }

    [Parameter]
    public int RoomId { get; set; }

    private QuoteView _quote = new();
    private RoomView _room = new();
    private IQueryable<ProductView> _products = new List<ProductView>().AsQueryable();
    private bool IsLoading = true;

    private List<RoomProfileProps> _roomProfileProps = new List<RoomProfileProps>();

    protected override async Task OnInitializedAsync()
    {
        _quote = await _quoteStore.ReadableStore.GetById(QuoteId);
        _room = _quote.Rooms.FirstOrDefault(r => r.Id == RoomId);
        _products = _room.Products.AsQueryable();
        IsLoading = false;

        _roomProfileProps.Add(new RoomProfileProps { Title = "Door Style" });
        _roomProfileProps.Add(new RoomProfileProps { Title = "Finish" });
        _roomProfileProps.Add(new RoomProfileProps { Title = "Interior Finish" });
        _roomProfileProps.Add(new RoomProfileProps { Title = "Drawer Hardware" });
    }

    private struct RoomProfileProps
    {
        public string Title { get; set; }
    }
}