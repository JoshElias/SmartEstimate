
@namespace SmartEstimate.Pages

@using Microsoft.AspNetCore.Components.QuickGrid

@inject QuoteStore _quoteStore


 @if(IsLoading) {
        <Spinner Class="text-stone-400 dark:text-stone-400 fill-orange-600" />
    } else if(!_roomsQueryable.Any()) {
        <span>No Quotes Available</span>
    } else {
        <ContentViewHeader 
            Title="Rooms"
            Description="We heard you like rooms"
            ButtonLabel="Add Room"
        />
        <DataGridWrapper>
            <QuickGrid Items=_roomsQueryable>
                <TemplateColumn             
                    Title="Name"
                    SortBy=@_sortByName
                    Sortable=true 
                >
                    <NavLink href=@($"/quotes/{context.Id}")>
                        @context.Name
                    </NavLink>
                </TemplateColumn>
                <PropertyColumn 
                    Title="Door Style"
                    Property=@(r => r.DoorStyle.Name)
                    Sortable=true
                />
                <PropertyColumn 
                    Title="Finish"
                    Property=@(r => r.Finish.Name)
                    Sortable=true
                />
                <PropertyColumn 
                    Title="Interior"
                    Property=@(r => r.Interior.Name)
                    Sortable=true 
                />
                <PropertyColumn 
                    TGridItem=RoomView 
                    TProp=string 
                    Title="Drawer Hardware"
                    Property=@(r => r.DrawerHardware.Name)
                    Sortable=true 
                />
                <PropertyColumn 
                    Title="Drawer Hardware"
                    Property=@(r => r.SubTotal)
                    Format="C"
                    Sortable=true 
                />
                <TemplateColumn 
                    Class="flex gap-x-2 justify-end"
                >
                    <button>
                        <TrashIcon Props=@(new IconProps() {
                            Class=@"
                                w-[22px]
                                cursor-pointer 
                                stroke-gray-400
                                hover:stroke-rose-500 
                                duration-300 
                                ease-in-out
                            " 
                        }) />
                    </button>         
                </TemplateColumn>
            </QuickGrid>
        </DataGridWrapper>
    } else {
        <span>No Quotes Available</span>
    }


@code {
    private bool IsLoading { get; set; } = true;

    [Parameter]
    public int QuoteId { get; set; }

    private QuoteView _quote = new();
    private IQueryable<RoomView> _roomsQueryable = new List<RoomView>().AsQueryable();
    private GridSort<RoomView> _sortByName = GridSort<RoomView>
        .ByAscending(r => r.Name);

    protected override async Task OnInitializedAsync()
    {
        _quote = await _quoteStore.ReadableStore.GetById(QuoteId);
        _roomsQueryable = _quote.Rooms.AsQueryable();
        IsLoading = false;
    }
}