@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer

@page "/quotes/{projectLinkId}/rooms/{projectGroupLinkId}/products/{libraryProductLinkId}"
@page "/quotes/{projectLinkId}/rooms/{projectGroupLinkId}/products"

@namespace SmartEstimate.Pages

@inject ProjectStore ProjectStore
@inject ILogger<ProductDetail> Logger

<div class="flex flex-col h-full"
    <SEBreadcrumbNav
        Options=@(new List<NavOptionProps> {
            new NavOptionProps { Path = "/quotes" },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}", Label = _project?.Name },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}", Label = _projectGroup?.Name },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}/products/new", Label = "New Product" },
        }) 
    />

    <div class="flex flex-1 flex-col container mt-6">
        <DmnSectionHeader 
            Title="Create Product"
            TitleClass="!text-3xl"
            Subtitle="So many products, so little time"
            SubmitButtonText="Save"
            CancelButtonText="Clear"
        /> 
        <div class="grid grid-cols-5 gap-8">
            <div class="col-span-3">
                <div class="h-full flex items-center w-2/3">
                    <div class="center-self w-full">
                        <ProductDetailTypeSelect 
                            SelectedProductType=@SelectedProductType
                            OnProductTypeChanged="OnProductTypeChanged"
                        />
                    </div>
                </div>
            </div>
            <div class="col-span-2">
               <ProductDetailPriceSummary />
            </div>

            @if(SelectedProductType is not null) {
                 <div class="col-span-3">
                    <ProductDetailDimensions />
                    <div class="mt-6" />
                    <ProductDetailAddOns ProductType=@SelectedProductType />
                </div>

                <div class="col-span-2">
                    <DmnFileDropzone 
                        Class="w-full"
                        IconClass="w-24 stroke-sky-500" 
                    />
                </div>

                <div class="col-span-5">
                    <ProductDetailComments />
                </div>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string? ProjectLinkId { get; set; }

    [Parameter]
    public string? ProjectGroupLinkId { get; set; }

    [Parameter]
    public string? LibraryProductLinkId { get; set; }

    private bool _isNew = true;

    private ProjectView? _project;
    private ProjectGroupView? _projectGroup;
    private LibraryProductView? _product;

    private ProductType? _selectedProductType;

    public ProductType? SelectedProductType
    {
        get => _selectedProductType;
        set
        {
            if (_selectedProductType != value)
            {
                _selectedProductType = value;
                StateHasChanged(); // This will cause the component to rerender
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _project = await ProjectStore.ReadableStore
            .GetById(ProjectLinkId!);
        _projectGroup = _project.ProjectGroups
            .FirstOrDefault(g => g.LinkID == ProjectGroupLinkId);
        if (LibraryProductLinkId is not null)
        {
            //_product = _room?.Products.FirstOrDefault(p => p.Id == ProductId);
            //_isNew = false;
        }
    }

    private void OnProductTypeChanged(ProductType? productType)
    {
        SelectedProductType = productType;
    }
}






