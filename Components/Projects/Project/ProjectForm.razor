@page "/quotes/new"
@rendermode InteractiveServer

@namespace SO.Components.Projects

@inject NavigationManager NavigationManager
@inject ProjectStore ProjectStore
@inject ILogger<ProjectForm> Logger


<div class="flex flex-col bg-slate-100"
    <SEBreadcrumbNav
        Options=@(new List<NavOptionProps> {
            new NavOptionProps { Path = "/quotes" },
            new NavOptionProps { Path = $"/quotes/add", Label = "New Quote" },
        }) 
    />

    <div class="flex flex-1 flex-col container mt-6">
        <EditForm 
            @ref=@_editForm
            Model=@_newProject     
            FormName="add-quote"
            OnValidSubmit=@AddQuote
        >
            <ObjectGraphDataAnnotationsValidator />
            <DmnSectionHeader 
                Title="Create Quote"
                TitleClass="!text-3xl"
                Subtitle="Let's do some business"
                SubmitButtonText="Save"
                CancelButtonText="Clear"
                IsLoading=@_isSubmitting
                OnSubmitClick=@OnSubmitClick
                OnCancelClick=@OnCancelClick
            />
            <div 
                class="
                    w-full 
                    border-b 
                    border-stone-300
                    mt-2 mb-5
                "
            />
            <DmnInputText 
                Label="Customer Name" 
                LabelClass="!text-base font-semibold" 
                @bind-Value=@_newProject!.Name
            />
            <div class="m-3"></div>
            <ShippingInput Project=@_newProject />
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    private ProjectView? _newProject { get; set; }

    private EditForm _editForm = default!;
    private bool _isSubmitting = false;

    protected override void OnInitialized()
    {
        _newProject ??= new("");
    }

    private async Task OnSubmitClick()
    {
        if (_editForm!.EditContext!.Validate()) {
            await AddQuote();
        } else {
            Logger.LogInformation("Validation failed!!!!");
        }
    }

    private void OnCancelClick()
    {
        _newProject = new("");
        StateHasChanged();
    }

    private async Task AddQuote()
    {
        _isSubmitting = true;
        Logger.LogInformation($"Creating new project: {_newProject!.Name}");
        ProjectView newProject = await ProjectStore!
            .WritableStore
            .Create(_newProject);

        Logger.LogInformation($"Created new project: {newProject.Name}");
        NavigationManager.NavigateTo("/quotes");
        _isSubmitting = false;
    }
}