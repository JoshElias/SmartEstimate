@inherits InputBase<ContactFormView>
@inject ILogger<ContactForm> Logger
@inject IMapper Mapper
@inject SmartOrderApi OrderApi
@namespace SO.Components.Projects

<EditForm 
    @ref=@_editForm
    Model=@Value
    FormName="contact-form"
    class="flex flex-col"
>
    <ObjectGraphDataAnnotationsValidator />
    <DmnSectionHeader 
        Title="New Contact"
        TitleClass="!text-xl"
        SubmitButtonText=@((_isNewContact ? "Add" : "Update"))
        CancelButtonText=@((_isNewContact ? "Cancel" : "Delete"))
        Size="sm"
        IsLoading=@_isSubmitting
        OnSubmitClick=@OnSubmitClick
        OnCancelClick=@OnCancelClick
    />
    <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6">
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Contact Name"
                @bind-Value=@Value.DisplayName
            />
        </div>
        <div class="sm:col-span-3"></div>
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Email Address" 
                @bind-Value=@Value.DefaultEmail.DisplayAs
            />
        </div>
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Phone Number" 
                @bind-Value=@Value.DefaultPhone.DisplayAs
            />
        </div>
    </div>
</EditForm>

@code {
    private EditForm _editForm = default!;
    private bool _isSubmitting = false;
    private bool _isNewContact = true;

    protected override void OnParametersSet() {
        if(!string.IsNullOrWhiteSpace(Value.DisplayName)) {
            _isNewContact = false;
        }
    }

    protected override bool TryParseValueFromString(
        string? value, 
        out ContactFormView contactFormView,
        out string validationErrorMessage) {
        throw new NotImplementedException();
    }

    private async Task OnSubmitClick() {
        if (!_editForm!.EditContext!.Validate()) {
            return;
        }
        await UpsertLocation();
    }

    private void OnCancelClick() {
    }

    private async Task UpsertLocation() {
        _isSubmitting = true;
        Logger.LogInformation($"Upserting new contact: {Value.DisplayName}");
        if(_isNewContact) {
            @* await OrderApi!
                .Contact
                .AddContact(
                    Value.DisplayName,
                    Value.DefaultPhone.DisplayAs,
                    Value.DefaultEmail.DisplayAs,
                    ShipLocation!
                ); *@
        } else {
            @* await OrderApi!
                .Contact
                .UpdateContact(Contact!); *@
        }
        Logger.LogInformation($"Upserted new contact: {Value.DisplayName}");
        //await OnChange.InvokeAsync(newContact);
        _isSubmitting = false;
    }
}
