@inherits InputBase<ContactFormView>
@inject ILogger<ContactForm> Logger
@inject IMapper Mapper
@inject SmartOrderApi OrderApi
@namespace SO.Components.Projects

<EditForm 
    @ref=@_editForm
    Model=@Value
    FormName="contact-form"
    class="flex flex-col"
>
    <ObjectGraphDataAnnotationsValidator />
    <DmnSectionHeader 
        Title="New Contact"
        TitleClass="!text-xl"
        SubmitButtonText=@((_isNewContact ? "Add" : "Update"))
        CancelButtonText="Cancel"
        Size="sm"
        IsLoading=@_isSubmitting
        OnSubmitClick=@OnSubmitClick
        OnCancelClick=@(() => OnCancelClicked.InvokeAsync())
    />
    <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6">
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Contact Name"
                @bind-Value=@Value.DisplayName
            />
        </div>
        <div class="sm:col-span-3"></div>
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Email Address" 
                @bind-Value=@Value.Email
            />
        </div>
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Phone Number" 
                @bind-Value=@Value.Phone
            />
        </div>
        <div class="col-span-1">
            <button 
                type="button" 
                class="dmn-btn-sm"
                @onclick=@OnDeleteClick
            >
                @if(_isDeleting) {
                    <Spinner Class="text-stone-400 dark:text-stone-400 fill-orange-600" />
                } else {
                    <span>Delete</span>
                }
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnCancelClicked { get; set; }

    private EditForm _editForm = default!;
    private bool _isSubmitting = false;
    private bool _isNewContact = true;
    private bool _isDeleting = false;

    protected override void OnParametersSet() {
        _isNewContact = string.IsNullOrEmpty(Value.DisplayName);
    }

    protected override bool TryParseValueFromString(
        string? value, 
        out ContactFormView contactFormView,
        out string validationErrorMessage) {
        throw new NotImplementedException();
    }

    private async Task OnSubmitClick() {
        if (!_editForm!.EditContext!.Validate()) {
            return;
        }
        await UpsertContact();
    }

    private async Task UpsertContact() {
        _isSubmitting = true;
        Logger.LogInformation($"Upserting new contact: {Value.DisplayName}");
        Contact contact = default!;
        if(_isNewContact) {
            contact = await OrderApi!
                .Contact
                .AddContact(
                    Value.DisplayName,
                    Value.Phone,
                    Value.Email
                );
            _isNewContact = false;
        } else {
            contact = await OrderApi
                .Contact
                .GetContactById(Value.LinkID)
                ?? throw new InvalidOperationException("Contact not found");
            Mapper.Map(Value, contact);
            await OrderApi!
                .Contact
                .UpdateContact(contact);
        }
        Logger.LogInformation($"Upserted contact: {contact.DisplayName}");
        var newView = Mapper.Map<ContactFormView>(contact);
        Value = newView;
        //await OnChange.InvokeAsync(newContact);
        _isSubmitting = false;
    }

    private async Task OnDeleteClick() {
        _isDeleting = true;
        var contact = await OrderApi
            .Contact
            .GetContactById(Value.LinkID)
            ?? throw new InvalidOperationException("Unable to find contact");
        await OrderApi
            .Contact
            .DeleteContact(contact);
        Value = new ContactFormView("");
        ValueChanged.InvokeAsync(Value);
        OnCancelClicked.InvokeAsync();
        _isDeleting = false;
    }
}
