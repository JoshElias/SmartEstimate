@namespace SO.Components.Projects 
@inherits InputBase<ContactFormView>
@inject IMapper Mapper
@inject SmartOrderApi OrderApi 

@* Takes and sets a Contact object
Displays a combobox of contacts
    If a valid contact was passed, set combobox to that contact
    Display properties of contact in a form below the combobox
        Form will display Save if the Contact already exists
        Form will display Create if the Contact does't exists
    If a property is changed, enable the save button *@

<div class="
    flex flex-col
    grid grid-cols-2 gap-4 
">
    <div class="flex col-span-full">
        <div class="flex flex-col col-span-2">
            <DmnComboBox
                Data=@_contacts
                @bind-Value:get=@_currentContact
                @bind-Value:set=@OnContactSelected 
                TextFieldName=@nameof(Contact.DisplayName)
                Placeholder="Select a Contact"
            />
            @if(!_isNew) {
                <button 
                    class="dmn-link mt-2"
                    @onclick=@OnCreateNewContactClicked
                >
                    Create New Contact
                </button>
            }
        </div>
        <div class="col-span-2"></div>
    </div>
    @if(_isEditing) {
        <div class="col-span-full">
            <ContactForm 
                @bind-Value:get=@Value
                @bind-Value:set=@OnContactChanged
                OnCancelClicked=@(() => _isEditing = false)
            />
        </div>
    }
</div>

@code {
    private IQueryable<Contact> _contacts = default!;
    private Contact _currentContact = default!;
    private bool _isEditing = false;
    private bool _isNew = false;

    protected override void OnParametersSet() {
        _isNew = string.IsNullOrEmpty(Value.DisplayName);
        _currentContact = Mapper.Map<Contact>(Value);
    }
    
    protected override async Task OnInitializedAsync() {
        _contacts = await OrderApi
            .Contact
            .GetContactsAsQueryable();
    }

    protected override bool TryParseValueFromString(
        string? value, 
        out ContactFormView result, 
        out string? validationErrorMessage
    ) {
        throw new NotImplementedException();
    }

    private void OnContactSelected(Contact contact) {
        _currentContact = contact;
        Value = Mapper.Map<ContactFormView>(_currentContact);
        _isNew = string.IsNullOrEmpty(Value.DisplayName);
        _isEditing = true;
    }

    private async Task OnContactChanged(ContactFormView contact) {
        Value = contact;
        // refresh the contacta and set the current contact
        if(string.IsNullOrEmpty(contact.DisplayName)) {
            _currentContact = new Contact();
            _isEditing = false;
            return;
        }
        _contacts = await OrderApi
            .Contact
            .GetContactsAsQueryable();
        _currentContact = _contacts
            .FirstOrDefault(c => c.LinkID == contact.LinkID)
            ?? throw new InvalidOperationException("Contact not found");
    }

    private void OnCreateNewContactClicked() {
        Value = new ContactFormView("");
        _isEditing = true;
    }
}