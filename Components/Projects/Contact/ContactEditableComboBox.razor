@namespace SO.Components.Projects 
@inherits InputBase<ContactFormView>
@inject IMapper Mapper
@inject SmartOrderApi OrderApi 

<div class="
    flex flex-col
    grid grid-cols-2 gap-4 
">
    <div class="flex col-span-full">
        <div class="flex flex-col col-span-2">
            <DmnComboBox
                Data=@_contacts
                @bind-Value:get=@_currentContact
                @bind-Value:set=@OnContactSelected 
                TextFieldName=@nameof(Contact.DisplayName)
                Placeholder="Select a Contact"
            />
            <button 
                class="dmn-link mt-2 text-left"
                @onclick=@OnCreateNewContactClicked
            >
                Create New Contact
            </button>
        </div>
        <div class="col-span-2"></div>
    </div>
    @if(_isEditing) {
        <div class="col-span-full pt-4 border-t-2 border-gray-300">
            <ContactForm 
                @bind-Value:get=@_currentFormView
                @bind-Value:set=@OnContactChanged
                OnCancelClicked=@(() => _isEditing = false)
            />
        </div>
    }
</div>

@code {
    private IQueryable<Contact> _contacts = default!;
    private Contact _currentContact = default!;
    private ContactFormView _currentFormView = default!;
    private bool _isEditing = false;

    protected override void OnInitialized() {
        //_currentFormView = Value;
        _currentContact = Mapper.Map<Contact>(Value);
    }
    
    protected override async Task OnInitializedAsync() {
        _contacts = await OrderApi
            .Contact
            .GetContactsAsQueryable();
    }

    protected override bool TryParseValueFromString(
        string? value, 
        out ContactFormView result, 
        out string? validationErrorMessage
    ) {
        throw new NotImplementedException();
    }

    private void OnContactSelected(Contact contact) {
        _currentContact = contact;
        Value = Mapper.Map<ContactFormView>(_currentContact);
        _currentFormView = Value;
        _isEditing = true;
    }

    private async Task OnContactChanged(ContactFormView contact) {
        _currentFormView = contact;
        Value = contact;
        if(!Value.IsPersisted) {
            _currentContact = new Contact();
            _isEditing = false;
            return;
        }
        _contacts = await OrderApi
            .Contact
            .GetContactsAsQueryable();
        _currentContact = _contacts
            .FirstOrDefault(c => c.LinkID == contact.LinkID)
            ?? throw new InvalidOperationException("Contact not found");
    }

    private void OnCreateNewContactClicked() {
        _isEditing = true;
        if(_currentFormView != null && !_currentFormView.IsPersisted) {
            return;
        }
        _currentFormView = new ContactFormView();
    }
}