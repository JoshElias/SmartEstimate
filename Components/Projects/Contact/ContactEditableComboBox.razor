@namespace SO.Components.Projects 
@inherits InputBase<string>
@inject IMapper Mapper
@inject SmartService SmartService 

<div class="
    flex flex-col
    grid grid-cols-2 gap-4 
">
    <div class="flex col-span-full">
        <div class="flex flex-col col-span-2">
            <DmnComboBox
                Data=@_contacts
                @bind-Value:get=@_currentContact
                @bind-Value:set=@OnContactSelected 
                TextFieldName=@nameof(Contact.DisplayName)
                Placeholder="Select a Contact"
            />
            <button 
                class="dmn-link mt-2 text-left"
                @onclick=@OnCreateNewContactClicked
            >
                Create New Contact
            </button>
        </div>
        <div class="col-span-2"></div>
    </div>
    <div class="col-span-full pt-4 border-t-2 border-gray-300">
        <ContactForm 
            ShipLocation=@ShipLocation
            @bind-Value:get=@Value
            @bind-Value:set=@OnContactChanged
            OnCancelClicked=@(() => _isEditing = false)
        />
    </div>
</div>

@code {
    [Parameter]
    public ShipLocation ShipLocation { get; set; } = default!;
    private IQueryable<Contact> _contacts = default!;
    private Contact? _currentContact;
    private bool _isLoading = true;
    private bool _isEditing = false;

    @* protected override void OnInitialized() {
        if(Value != null) {
            
        }
        //_currentFormView = Value;
        _currentContact = Mapper.Map<Contact>(Value);
    } *@
    
    protected override async Task OnInitializedAsync() {
        _contacts = SmartService.GetClient()
            .Contact
            .GetShipLocationContactsAsQueryable(
                ShipLocation
            );
        if(!String.IsNullOrWhiteSpace(Value)) {
            _currentContact = await SmartService.GetClient()
                .Contact
                .GetShipLocationContactById(
                    Value,
                    ShipLocation
                );
        }
        _isLoading = false;
    }

    protected override bool TryParseValueFromString(
        string? value, 
        out string result, 
        out string? validationErrorMessage
    ) {
        throw new NotImplementedException();
    }

    private async Task OnContactSelected(Contact contact) {
        _currentContact = contact;
        Value = contact.LinkID;
        await ValueChanged.InvokeAsync(Value);
        _isEditing = true;
    }

    private async Task OnContactChanged(string contactLinkId) {
        Console.WriteLine("Contact Changed");
        Contact contact = default!;
        _currentContact = String.IsNullOrWhiteSpace(contactLinkId)
            ? null
            : await SmartService.GetClient()
                .Contact
                .GetShipLocationContactById(
                    contactLinkId,
                    ShipLocation
                )
                ?? throw new InvalidOperationException("Contact not found");
        Value = contactLinkId;
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task OnCreateNewContactClicked() {
        Value = null;
        await ValueChanged.InvokeAsync(Value); 
    }
}