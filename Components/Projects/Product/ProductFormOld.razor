@* @page "/quotes/{projectLinkId}/rooms/{projectGroupLinkId}/products/{productLinkId}"
@page "/quotes/{projectLinkId}/rooms/{projectGroupLinkId}/products/new" *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using AutoMapper
@using SMART.Web.OrderApi
@using SMART.Common.LibraryManagement
@using SMART.Common.ProductionManagement
@using SMART.Common.Utility
@using SMART.Common.CompanyManagement
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@namespace SO.Components.Projects

@inject IMapper Mapper
@inject SmartService SmartService
@inject ILogger<ProductForm> Logger

<div class="flex flex-col h-full"
    <BreadcrumbNav
        Options=@(new List<NavOptionProps> {
            new NavOptionProps { Path = "/quotes" },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}", Label = _project?.Name },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}", Label = _projectGroup?.Name },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}/products/new", Label = "New Product" },
        }) 
    />

    <div class="flex flex-1 flex-col container mt-6">
        @if(_isLoading) {
            <div class="flex flex-col items-center justify-center h-full">
                <div class="text-3xl font-bold text-gray-500">
                    <span class="ml-4">Loading...</span>
                </div>
            </div>
        } else {
            <EditForm 
                @ref=@_editForm
                Model=@_productFormView    
                FormName="add-room"
                OnValidSubmit=@AddProductToProjectGroup
            >
                <ObjectGraphDataAnnotationsValidator />
                <DmnSectionHeader 
                    Title="Create Product"
                    TitleClass="!text-3xl"
                    Subtitle="So many products, so little time"
                    SubmitButtonText="Save"
                    CancelButtonText="Clear"
                /> 
                <div class="grid grid-cols-5 gap-8">
                    <div class="col-span-3">
                        <div class="h-full flex items-center w-2/3">
                            <div class="center-self w-full">
                                @* <ProductDetailTypeSelect 
                                    SelectedProductType=@SelectedProductType
                                    OnProductTypeChanged="OnProductTypeChanged"
                                /> *@
                                <DmnComboBox 
                                    Data=@_allProducts
                                    bind-Value=@_selectedProduct 
                                    TextFieldName=@nameof(ProductFormView.Name)
                                    Label="Select a Product"
                                    Class="pb-0"
                                />

                                @if(_selectedProduct is not null) {
                                    <DmnComboBox
                                        Data=@_styleConfigurations
                                        bind-Value=@_selectedStyleConfiguration
                                        TextFieldName=@nameof(LibraryStyleConfiguration.Name)
                                        Label="Select a Door Style"
                                    />
                                }

                                @if(_selectedStyleConfiguration is not null) {
                                    <DmnComboBox
                                        Data=@_finishes
                                        bind-Value=@_selectedFinish
                                        Label="Select a Finish"
                                    />
                                }
                                
                                @if(_selectedStyleConfiguration is not null) {
                                    <DmnComboBox
                                        Data=@_doorHardwares
                                        bind-Value=@_selectedDoorHardware
                                        ValueExpression=@(() => _selectedDoorHardware)
                                        Label="Select a Door Hardware"
                                    />
                                }

                                

                                @* <InputSelect 
                                    @bind-Value=_selectedProductType
                                    class="mt-4"
                                >
                                    <option value="">Select a Product Type</option>
                                    @foreach(ProductCategoryType type in Enum.GetValues<ProductCategoryType>()) {
                                            <option value=@type>@type</option>
                                    }
                                </InputSelect> *@

                            </div>
                        </div>
                    </div>
                    @* <div class="col-span-2">
                    <ProductDetailPriceSummary />
                    </div>

                    @if(SelectedProductType is not null) {
                        <div class="col-span-3">
                            <ProductDetailDimensions />
                            <div class="mt-6" />
                            //<ProductDetailAddOns ProductType=@SelectedProductType />
                        </div>

                        <div class="col-span-2">
                            <DmnFileDropzone 
                                Class="w-full"
                                IconClass="w-24 stroke-sky-500" 
                            />
                        </div>

                        <div class="col-span-5">
                            <ProductDetailComments />
                        </div>
                    } *@
                </div>
            </EditForm>
        }
    </div>
</div>


@code {
    [Parameter]
    public string? ProjectLinkId { get; set; }

    [Parameter]
    public string? ProjectGroupLinkId { get; set; }

    [Parameter]
    public string? ProductLinkId { get; set; }

    private EditForm? _editForm = default!;
    private bool _isSubmitting = false;

    private bool _isLoading = true;

    private Project? _project;
    private ProjectGroup? _projectGroup;
    private Product? _product;
    private ProductFormView? _productFormView;

    private IQueryable<LibraryProduct>? _allProducts;
    
    private LibraryProduct? _selectedProduct;

    private ProductCategoryType? _selectedProductType { get; set; }

    private IQueryable<LibraryStyleConfiguration>? _styleConfigurations;
    private LibraryStyleConfiguration? _selectedStyleConfiguration;

    private IQueryable<string>? _finishes;
    private string? _selectedFinish;

    private IQueryable<string>? _doorHardwares;
    private string? _selectedDoorHardware;
    

    private IDictionary<ProductCategoryType, List<ProductFormView>>? _productTypeDictionary;

    private PersistingComponentStateSubscription? _stateSubscription;

    protected override async Task OnInitializedAsync() {
        _project = await SmartService.GetClient()
            .Project
            .GetProjectById(ProjectLinkId);
        _projectGroup = SmartService.GetClient()
            .ProjectGroup
            .GetProjectGroupById(
                ProjectGroupLinkId!,
                _project
            );
        IList<Product> groupProducts = _projectGroup?.ProjectGroupProducts;
        var product = groupProducts?
            .First(p => p.LinkID == ProjectLinkId);
        if(_product != null) {
            _productFormView = Mapper.Map<ProductFormView>(product);
        } else {
            _productFormView = new();
        }
        var products = await SmartService.GetClient()
            .Product
            .GetCabinets();
        _allProducts = products.AsQueryable();
        @* _productTypeDictionary = await OrderApi
            .Product
            .GetSortedProducts(products); *@
        _isLoading = false;
    }

    @* private void OnProductTypeChanged(ChangeEventArgs e) {
        ProductCategoryType productType = (ProductCategoryType)Enum.Parse(typeof(ProductCategoryType), e.Value.ToString());
        _selectedProductType = productType;
    } *@
    
    private async void OnProductSelected(object obj) {
        var product = obj as LibraryProduct;
        Logger.LogInformation($"Product Code selected: {product?.Name}");
        _selectedProduct = product;

        // Get StyleConfigurations for this product
        var client = SmartService!.GetClient();
        _styleConfigurations = client
            .Product
            .GetDoorStylesForProduct(product)
            .AsQueryable();

        var filteredStyleConfigs = _styleConfigurations
            .Where(c => c.Finish != null && c.Finish.Length > 10);
        _styleConfigurations = filteredStyleConfigs;
        @* foreach(LibraryStyleConfiguration style in styleConfiguration) {
            Logger.LogInformation($"Style: {style}");
        } *@
        
        @* IList<Category> rootCategories = OrderApi.GetRootProductCategories();
        foreach(Category category in rootCategories) {
            Logger.LogInformation($"Root Category: {category.CategoryName}");
        }
        
        IList<Category> childCategories = OrderApi.GetChildCategories();
        foreach(Category category in childCategories) {
            Logger.LogInformation($"Children Category: {category.CategoryName}");
        } *@
        // Get Categories for this product
        //IList<Category> categories = OrderApi.GetProductCategories(libraryProduct);

        StateHasChanged();
    }
    
    private void OnStyleSelected(object obj) {
        LibraryStyleConfiguration? styleConfiguration = obj as LibraryStyleConfiguration;
        //Logger.LogInformation($"Style selected: {styleConfiguration?.Name}");
        _selectedStyleConfiguration = styleConfiguration;

        _finishes = SmartService.GetClient()
            .Product
            .GetAllowedFinishes(styleConfiguration!)
            .AsQueryable();
        Logger.LogInformation($"Finishes: {_finishes.Count()}");
        foreach(string finish in _finishes) {
            Logger.LogInformation(finish);
        }

        if(_finishes.Count() < 1) {
            _finishes.Append("None");
        } 

        _doorHardwares = SmartService.GetClient()
            .Product
            .GetAllowedDrawerHardware(styleConfiguration!)
            .AsQueryable();
    }

    private Task AddProductToProjectGroup() {
        return Task.CompletedTask;
        @* _isSubmitting = true;
        _logger!.LogInformation($"Creating new room: {_room!.Name}");
        ProjectGroupView newRoom = await _projectStore!
            .AddRoom(
                ProjectLinkId!,
                _room!
                
            );
        _logger!.LogInformation($"Created new room: {newRoom.Name}");
        _navigationManager!.NavigateTo($"/quotes/{ProjectLinkId}");
        _isSubmitting = false;*@
    } 
}