@rendermode @(new InteractiveServerRenderMode(prerender: false))
@namespace SO.Components.Projects

@* @page "/" *@
@page "/product-pricing-test"

@inject IMapper Mapper
@inject SmartOrderApi OrderApi
@inject ILogger<ProductPricingTest> Logger

<div class="flex flex-col h-full"
    <div class="flex flex-1 flex-col container mt-6">
        @if(_isLoading) {
            <div class="flex flex-col items-center justify-center h-full">
                <div class="text-3xl font-bold text-gray-500">
                    <span class="ml-4">Loading...</span>
                </div>
            </div>
        } else {
            <DmnSectionHeader 
                Title="Test Product Pricing"
                TitleClass="!text-3xl"
                Subtitle="Test Product Search, Category Sorting, Finish and Drawer Hardware Selection and getting the Price of the product"
                SubmitButtonText="Get Price"
                CancelButtonText="Clear"
                OnSubmitClick=@OnSubmitClick
                OnCancelClick=@OnCancelClick
            /> 
            <EditForm 
                @ref=@_editForm
                Model=@_newProduct     
                FormName="test-product-pricing"
                OnValidSubmit=@GetProductPrice
            >
                <ObjectGraphDataAnnotationsValidator />
                <div class="grid grid-cols-6 gap-8 mt-8">
                    <div class="col-span-3">
                        <div class="h-full flex items-center w-2/3">
                            <div class="center-self w-full">
                                @* <ProductDetailTypeSelect 
                                    SelectedProductType=@SelectedProductType
                                    OnProductTypeChanged="OnProductTypeChanged"
                                />  *@
                                <DmnComboBox 
                                    Data=@_allProducts
                                    bind-Value=@_selectedProduct
                                    TextFieldName=@nameof(ProductFormView.Name)
                                    Label="Select a Product"
                                    Class="pb-0"
                                />
@* 
                                <div class="flex flex-col">
                                    @foreach(var product in _allProducts) {
                                        <span>@product.Name</span>
                                    }
                                </div> *@

                                @if(_selectedProduct is not null) {
                                    <div class="mt-3" />
                                    <DmnComboBox
                                        Data=@_styleConfigurations
                                        bind-Value=@_selectedStyleConfiguration
                                        TextFieldName=@nameof(LibraryStyleConfiguration.Name)
                                        Label="Select a Door Style"
                                    />
                                }

                                @if(_selectedStyleConfiguration is not null) {
                                    <div class="mt-3" />
                                    <DmnComboBox
                                        Data=@_finishes
                                        bind-Value=@_selectedFinish
                                        Label="Select a Finish"
                                    />
                                }
                                
                                @if(_selectedStyleConfiguration is not null) {
                                    <div class="mt-3" />
                                    <DmnComboBox
                                        Data=@_doorHardwares
                                        bind-Value=@_selectedDoorHardware
                                        Label="Select a Door Hardware"
                                    />
                                }

                                

                                @* <InputSelect 
                                    @bind-Value=_selectedProductType
                                    class="mt-4"
                                >
                                    <option value="">Select a Product Type</option>
                                    @foreach(ProductCategoryTypes type in Enum.GetValues<ProductCategoryTypes>()) {
                                            <option value=@type>@type</option>
                                    }
                                </InputSelect> *@

                            </div>
                        </div>
                    </div>
                    <div class="col-span-3">
                        <div class="flex flex-col">
                            <label>
                                Width:
                               <InputNumber @bind-Value=@_newProduct.Width />
                            </label>
                            <div class="mt-3" />
                            <label>
                                Height:
                               <InputNumber @bind-Value=@_newProduct.Height />
                            </label>
                            <div class="mt-3" />
                            <label>
                                Depth:
                               <InputNumber @bind-Value=@_newProduct.Depth />
                            </label>


                            <div class="mt-5" />
                            <label>
                                Left End Finished:
                                <InputCheckbox @bind-Value=@_leftEndFinished />
                            </label>
                            <label>
                                Right End Finished:
                                <InputCheckbox @bind-Value=@_rightEndFinished />
                            </label>
                        </div>
                    </div>
                </div>
                <div class="col-span-6 border-solid border-2 border-stone-700 flex mt-8 p-3 text-xl">
                   <h2 class="mr-2">Product Price:</h2> 
                   <span>@_productPrice</span>
                </div>
            </EditForm>
        }
    </div>
</div>


@code {
    
    private bool _isLoading = true;

    private EditForm? _editForm = default!;
    private bool _isSubmitting = false;

    private ProductFormView _newProduct = new("");

    private IQueryable<LibraryProduct>? _allProducts;
    private IDictionary<ProductCategoryTypes, List<LibraryProduct>> _sortedProducts;
    private LibraryProduct? _selectedProduct;

    private ProductCategoryTypes? _selectedProductType { get; set; }

    private IQueryable<LibraryStyleConfiguration>? _styleConfigurations;
    private LibraryStyleConfiguration? _selectedStyleConfiguration;

    private IQueryable<string>? _finishes;
    private string? _selectedFinish;

    private IQueryable<string>? _doorHardwares;
    private string? _selectedDoorHardware;

    private bool _leftEndFinished = false;
    private bool _rightEndFinished = false;

    private float _productPrice = 0;

    

    private Dictionary<ProductCategoryTypes, List<ProductFormView>> _productTypeDictionary;


    protected override async Task OnInitializedAsync() {
        var products = await OrderApi
            .Product
            .GetAllCabinets();
        _allProducts = products.AsQueryable();
        _sortedProducts = await OrderApi
            .Product
            .GetSortedProducts(products!);
        _isLoading = false;
    }

    @* protected override void OnAfterRender(bool firstRender) {       
        if(_selectedProductType is not null) {
            ProductCategoryTypes productType = (ProductCategoryTypes)_selectedProductType;
            _allProducts = _productTypeDictionary[productType].AsQueryable();
        }
    } *@
    
    @* private Task PersistFormState() {
        ApplicationState?.PersistAsJson("products", _allProducts);
        //ApplicationState?.PersistAsJson("project", _project);
        return Task.CompletedTask;
    } *@

    @* private void OnProductTypeChanged(ChangeEventArgs e) {
        ProductCategoryTypes productType = (ProductCategoryTypes)Enum.Parse(typeof(ProductCategoryTypes), e.Value.ToString());
        _selectedProductType = productType;
    }
    *@

    private async void OnProductSelected(object obj) {
        var product = obj as LibraryProduct;
        Logger.LogInformation($"Product Code selected: {product?.Name}");
        _selectedProduct = product;

        // Get StyleConfigurations for this product
        _styleConfigurations = (await OrderApi
            .Product
            .GetDoorStylesForProduct(product))
            .AsQueryable();
        _selectedStyleConfiguration = null;

        _finishes = null;
        _selectedFinish = null;
        _doorHardwares = null;
        _selectedDoorHardware = null;
    }
    
    private void OnStyleSelected(object obj) {
        var styleConfiguration = obj as LibraryStyleConfiguration;
        //Logger.LogInformation($"Style selected: {styleConfiguration?.Name}");
        _selectedStyleConfiguration = styleConfiguration;

        _finishes = OrderApi
            .Product
            .GetAllowedFinishes(styleConfiguration!)
            .AsQueryable();
        Logger.LogInformation($"Finishes: {_finishes.Count()}");
        _selectedFinish = null;

        _doorHardwares = OrderApi
            .Product
            .GetAllowedDrawerHardware(styleConfiguration!)
            .AsQueryable();
        Logger.LogInformation($"Door Hardwares: {_doorHardwares.Count()}");
        _selectedDoorHardware = null;
    }

    private void OnSubmitClick(){
        if (_editForm!.EditContext!.Validate()) {
            GetProductPrice();
        } else {
            Logger.LogInformation("Validation failed!!!!");
        }
    }

    private void OnCancelClick() {
        Logger.LogInformation("On Cancel Click");
    }

    private async Task GetProductPrice() {
        _isSubmitting = true;
        Logger.LogInformation("Get Product Price");
        _newProduct.ProductFinishInterior = _selectedFinish;
        _newProduct.ProductLeftSide = _leftEndFinished ? "Finished" : "Unfinished";
        _newProduct.ProductRightSide = _rightEndFinished ? "Finished" : "Unfinished";
        _newProduct.ProductSlide = _selectedDoorHardware;
        _newProduct.ProductDoorSwing = "Left";
        var priceRes = await OrderApi
            .Product
            .GetProductPrice(
                _selectedProduct!,
                _newProduct.Width,
                _newProduct.Height,
                _newProduct.Depth,
                _selectedStyleConfiguration!.Name
            );
        _productPrice = priceRes.Item1;
        Logger.LogInformation("Product Price: "+_productPrice);
        Logger.LogInformation("Product Resporse: "+priceRes.Item2);
        _isSubmitting = false;
    } 
}