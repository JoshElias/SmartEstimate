@page "/product-pricing-test"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering(true)]
@namespace SO.Components.Projects
@inject IMapper Mapper
@inject SmartOrderApi OrderApi
@inject ILogger<ProductPricingTest> Logger

<div class="flex flex-col h-full"
    <div class="flex flex-1 flex-col container mt-6">
        @if(_isLoading) {
            <div class="flex flex-col items-center justify-center h-full">
                <div class="text-3xl font-bold text-gray-500">
                    <span class="ml-4">Loading...</span>
                </div>
            </div>
        } else {
            <DmnSectionHeader 
                Title="Test Product Pricing"
                TitleClass="!text-3xl"
                Subtitle="Test Product Search, Category Sorting, Finish and Drawer Hardware Selection and getting the Price of the product"
                SubmitButtonText="Get Price"
                CancelButtonText="Clear"
                OnSubmitClick=@OnSubmitClick
                OnCancelClick=@OnCancelClick
            /> 
            <EditForm 
                @ref=@_editForm
                Model=@_productFormView    
                FormName="test-product-pricing"
                OnValidSubmit=@GetProductPrice
            >
                <ObjectGraphDataAnnotationsValidator />
                <div class="grid grid-cols-6 gap-8 mt-8">
                    <div class="col-span-6">
                        <DmnComboBox 
                            Data=@_allCabinets
                            @bind-Value:get=@_selectedCabinet
                            @bind-Value:set=@(c => OnProductSelected(c))
                            TextFieldName=@nameof(LibraryProduct.Name)
                            Label="Select a Product"
                            Class="pb-4"
                        />

                        @if(_selectedCabinet != null) {
                            <DmnComboBox 
                                Data=@_doorStyles
                                @bind-Value:get=@_selectedDoorStyle
                                @bind-Value:set=@(s => OnStyleSelected(s))
                                TextFieldName=@nameof(LibraryStyleConfiguration.Name)
                                Label="Select a Door Style"
                                Class="pb-4"
                            />
                        }

                        @if(_selectedDoorStyle != null) {
                            <div class="col-span-6">
                                <div class="col-span-3">
                                    <DmnComboBox 
                                        Data=@_finishes
                                        @bind-Value=@_selectedFinish
                                        Label="Select a Finish"
                                        Class="pb-4"
                                    />
                                    <DmnComboBox 
                                        Data=@_drawerHardwares
                                        @bind-Value=@_selectedDrawerHardware
                                        Label="Select a Drawer Hardware"
                                        Class="pb-4"
                                    />
                                </div>
                                <div class="col-span-3">
                                    <div class="flex flex-col">
                                        <label>
                                            Width:
                                            <InputNumber @bind-Value=@_productFormView.Width />
                                        </label>
                                        <div class="mt-3" />
                                        <label>
                                            Height:
                                            <InputNumber @bind-Value=@_productFormView.Height />
                                        </label>
                                        <div class="mt-3" />
                                        <label>
                                            Depth:
                                            <InputNumber @bind-Value=@_productFormView.Depth />
                                        </label>
                                    </div>
                                </div>
                            </div>
                        }
                        </div>
                    </div> 
                    @if(_productPrice != null 
                        || !string.IsNullOrEmpty(_priceError)
                    ) {
                        <div class="col-span-6 mt-6">
                            <div class="flex flex-col">
                                <label>
                                    Product Price:
                                    @_productPrice
                                </label>
                                @if(!string.IsNullOrEmpty(_priceError)) {
                                    <div class="mt-3" />
                                    <label>
                                        Product Error:
                                        @_priceError
                                    </label>
                                }
                            </div>
                        </div>
                    }
            </EditForm>
        }
    </div>
</div>


@code {
    private bool _isLoading = true;
    private EditForm? _editForm;
    private bool _isSubmitting = false;

    private ProductFormView _productFormView = new("");

    private IQueryable<LibraryProduct>? _allCabinets;
    private IDictionary<ProductCategoryType, List<LibraryProduct>> _sortedCabinets;
    private LibraryProduct? _selectedCabinet;

    private ProductCategoryType? _selectedProductType { get; set; }
    private IQueryable<ProductCategoryType>? _productTypes;

    private IQueryable<LibraryStyleConfiguration>? _doorStyles;
    private LibraryStyleConfiguration? _selectedDoorStyle;

    private IQueryable<string>? _finishes;
    private string? _selectedFinish;

    private IQueryable<string>? _drawerHardwares;
    private string? _selectedDrawerHardware;

    private bool _leftEndFinished = false;
    private bool _rightEndFinished = false;

    private float? _productPrice;
    private string _priceError = "";

    

    private Dictionary<ProductCategoryType, List<ProductFormView>> _productTypeDictionary;


    protected override async Task OnInitializedAsync() {
        //_productTypes test = Enum.GetValues<ProductCategoryType>().AsQueryable();
        var cabinets = await OrderApi
            .Product
            .GetAllCabinets();
        _allCabinets = cabinets.AsQueryable();
        _sortedCabinets = await OrderApi
            .Product
            .GetSortedProducts(cabinets);
        _isLoading = false;
    }

    @* protected override void OnAfterRender(bool firstRender) {       
        if(_selectedProductType is not null) {
            ProductCategoryType productType = (ProductCategoryType)_selectedProductType;
            _allProducts = _productTypeDictionary[productType].AsQueryable();
        }
    } *@
    
    @* private Task PersistFormState() {
        ApplicationState?.PersistAsJson("products", _allProducts);
        //ApplicationState?.PersistAsJson("project", _project);
        return Task.CompletedTask;
    } *@

    @* private void OnProductTypeChanged(ChangeEventArgs e) {
        ProductCategoryType productType = (ProductCategoryType)Enum.Parse(typeof(ProductCategoryType), e.Value.ToString());
        _selectedProductType = productType;
    }
    *@

    private async void OnProductSelected(LibraryProduct product) {
        Logger.LogInformation($"Product Code selected: {product?.Name}");
        _selectedCabinet = product;

        // Get StyleConfigurations for this product
        _doorStyles = (await OrderApi
            .Product
            .GetDoorStylesForProduct(product))
            .AsQueryable();
        _selectedDoorStyle = null;

        _finishes = null;
        _selectedFinish = null;
        _drawerHardwares = null;
        _selectedDrawerHardware = null;
    }

    private void OnProductTypeChanged(ProductCategoryType e) {
        Logger.LogInformation($"Product Type selected: {e}");
        _selectedProductType = e;
    }
    
    private void OnStyleSelected(LibraryStyleConfiguration doorStyle) {
        _selectedDoorStyle = doorStyle;

        _finishes = OrderApi
            .Product
            .GetAllowedFinishes(doorStyle!)
            .AsQueryable();
        Logger.LogInformation($"Finishes: {_finishes.Count()}");
        _selectedFinish = null;

        _drawerHardwares = OrderApi
            .Product
            .GetAllowedDrawerHardware(doorStyle!)
            .AsQueryable();
        Logger.LogInformation($"Drawer Hardwares: {_drawerHardwares.Count()}");
        _selectedDrawerHardware = null;
    }

    private async Task OnSubmitClick(){
        if (_editForm!.EditContext!.Validate()) {
            await GetProductPrice();
        } else {
            Logger.LogInformation("Validation failed!!!!");
        }
    }

    private void OnCancelClick() {
        Logger.LogInformation("On Cancel Click");
    }

    private async Task GetProductPrice() {
        Logger.LogInformation("Get Product Price");
        _isSubmitting = true;
        _selectedCabinet.ProductFinishInterior = _selectedFinish;
        _selectedCabinet.ProductLeftSide = _leftEndFinished ? "Finished" : "Unfinished";
        _selectedCabinet.ProductRightSide = _rightEndFinished ? "Finished" : "Unfinished";
        _selectedCabinet.ProductSlide = _selectedDrawerHardware;
        _selectedCabinet.ProductDoorSwing = "Left";
        Logger.LogInformation("Product Finish: "+_selectedFinish);
        Logger.LogInformation("Product Drawer Hardware: "+_selectedDrawerHardware);
        var priceRes = await OrderApi
            .Product
            .GetProductPrice(
                _selectedCabinet!,
                _productFormView.Width,
                _productFormView.Height,
                _productFormView.Depth,
                _selectedDoorStyle!.Name
            );
        _productPrice = priceRes.Item1;
        _priceError = priceRes.Item2;
        _isSubmitting = false;
        Logger.LogInformation("Product Price: "+_productPrice);
        Logger.LogInformation("Product Resporse: "+priceRes.Item2);
    } 
}