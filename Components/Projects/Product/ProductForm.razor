@page "/quotes/{projectLinkId}/rooms/{projectGroupLinkId}/products/new"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering(true)]
@namespace SO.Components.Projects
@inject IMapper Mapper
@inject SmartService SmartService
@inject NavigationManager NavigationManager
@inject ILogger<ProductPricingTest> Logger

<div class="flex flex-col h-full">    
    <BreadcrumbNav
        Options=@(new List<NavOptionProps> {
            new NavOptionProps { Path = "/quotes" },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}", Label = _project.Name },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}", Label = _projectGroup.Name },
            new NavOptionProps { Path = $"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}/products/new", Label = "New Product" },
        }) 
    />
    <div class="flex flex-1 flex-col container mt-6">
        @if(_isLoading) {
            <div class="flex flex-col items-center justify-center h-full">
                <Spinner Class="w-12 h-12"/>
            </div>
        } else {
            <DmnSectionHeader 
                Title="Test Product Pricing"
                TitleClass="!text-3xl"
                Subtitle="Test Product Search, Category Sorting, Finish and Drawer Hardware Selection and getting the Price of the product"
                SubmitButtonText="Get Price"
                CancelButtonText="Clear"
                OnSubmitClick=@OnSubmitClick
                OnCancelClick=@OnClearClick
            /> 
            <EditForm 
                @ref=@_editForm
                Model=@_productFormView    
                FormName="test-product-pricing"
                OnValidSubmit=@GetProductPrice
            >
                <ObjectGraphDataAnnotationsValidator />
                <div class="grid grid-cols-6 gap-8 mt-8">
                    <div class="col-span-3">
                        <DmnComboBox 
                            Data=@_allCabinets
                            @bind-Value:get=@_selectedCabinet
                            @bind-Value:set=@(c => OnProductSelected(c))
                            TextFieldName=@nameof(LibraryProduct.Name)
                            Label="Select a Product"
                            Class="pb-4"
                        />
                        <DmnComboBox 
                            Data=@_allAccessories
                            @bind-Value:get=@_selectedAccessory
                            TextFieldName=@nameof(LibraryProduct.Name)
                            Placeholder="Select an Accessory"
                            Class="pb-4"
                        />
                        <DmnComboBox 
                            Data=@_allMoldings
                            @bind-Value:get=@_selectedMolding
                            TextFieldName=@nameof(LibraryProduct.Name)
                            Placeholder="Select a Molding"
                            Class="pb-4"
                        />

                        @if(_selectedCabinet != null) {
                            <DmnComboBox 
                                Data=@_doorStyles
                                @bind-Value:get=@_selectedDoorStyle
                                @bind-Value:set=@(s => OnStyleSelected(s))
                                TextFieldName=@nameof(LibraryStyleConfiguration.Name)
                                Label="Select a Door Style"
                                Class="pb-4"
                            />
                        }

                        @if(_selectedDoorStyle != null) {
                            <div class="col-span-6">
                                <div class="col-span-3">
                                    <DmnComboBox 
                                        Data=@_finishes
                                        @bind-Value=@_selectedFinish
                                        Label="Select an Interior Finish"
                                        Class="pb-4"
                                    />
                                    <DmnComboBox 
                                        Data=@_drawerHardwares
                                        @bind-Value=@_selectedDrawerHardware
                                        Label="Select a Drawer"
                                        Class="pb-4"
                                    />
                                </div>
                            </div>
                        }
                        </div>
                    </div> 
                    <div class="col-span-3">
                        @if(_selectedCabinet != null) {
                            @* <img 
                                class="w-64 h-64"
                                src=@GetImageSource()
                                alt="Description of image"
                            /> *@
                            <div class="flex flex-col">
                                <label>
                                    Width:
                                    <InputNumber @bind-Value=@_productFormView.Width />
                                </label>
                                <div class="mt-3" />
                                <label>
                                    Height:
                                    <InputNumber @bind-Value=@_productFormView.Height />
                                </label>
                                <div class="mt-3" />
                                <label>
                                    Depth:
                                    <InputNumber @bind-Value=@_productFormView.Depth />
                                </label>
                                <label>
                                    Left End Finished:
                                    <InputCheckbox @bind-Value=@_leftEndFinished/>
                                </label>
                                <label>
                                    Right End Finished:
                                    <InputCheckbox @bind-Value=@_rightEndFinished/>
                                </label>
                            </div>
                        }

                    </div>
                    @if(_productPrice != null 
                        || !string.IsNullOrWhiteSpace(_priceError)
                    ) {
                        <div class="col-span-6 mt-6">
                            <div class="flex flex-col">
                                <label>
                                    Quatity:
                                    <InputNumber @bind-Value=@_productFormView.Quantity />
                                </label>
                                <label>
                                    Product Price:
                                    $@(_productPrice * _productFormView.Quantity)
                                </label>
                                @if(!string.IsNullOrWhiteSpace(_priceError)) {
                                    <div class="mt-3" />
                                    <label>
                                        Product Error:
                                        @_priceError
                                    </label>
                                }
                                <button 
                                    class="dmn-btn mt-4"
                                    onclick=@AddProductToProjectGroup
                                >
                                    Add Product
                                </button>
                            </div>
                        </div>
                    }
            </EditForm>
        }
    </div>
</div>


@code {    
    
    [Parameter]
    public string ProjectLinkId { get; set; }

    [Parameter]
    public string ProjectGroupLinkId { get; set; }
    
    private bool _isLoading = true;
    private EditForm _editForm = default!;
    private bool _isSubmitting = false;
    
    private Project _project = default!;
    private ProjectGroup _projectGroup = default!;

    private ProductFormView _productFormView = new();

    private IQueryable<LibraryProduct>? _allCabinets;
    private IQueryable<LibraryProduct>? _allAccessories;
    private IQueryable<LibraryProduct>? _allMoldings;
    private LibraryProduct? _selectedCabinet;
    private LibraryProduct? _selectedAccessory;
    private LibraryProduct? _selectedMolding;

    private ProductCategoryType? _selectedProductType { get; set; }
    private IQueryable<ProductCategoryType>? _productTypes;

    private IQueryable<LibraryStyleConfiguration>? _doorStyles;
    private LibraryStyleConfiguration? _selectedDoorStyle;

    private IQueryable<string>? _finishes;
    private string? _selectedFinish;

    private IQueryable<string>? _drawerHardwares;
    private string? _selectedDrawerHardware;

    private bool _leftEndFinished = false;
    private bool _rightEndFinished = false;

    private float? _productPrice;
    private string _priceError = "";

    

    private Dictionary<ProductCategoryType, List<ProductFormView>> _productTypeDictionary;


    protected override async Task OnInitializedAsync() {
        _project = await SmartService.GetClient()
            .Project
            .GetProjectById(ProjectLinkId)
            ?? throw new InvalidOperationException("Project not found");
        _projectGroup = SmartService.GetClient()
            .ProjectGroup
            .GetProjectGroupById(
                ProjectGroupLinkId,
                _project
            )
            ?? throw new InvalidOperationException("Project Group not found");
        //_productTypes test = Enum.GetValues<ProductCategoryType>().AsQueryable();
        _allCabinets = await SmartService.GetClient()
            .Product
            .GetCabinetsAsQueryable();
        _allAccessories = await SmartService.GetClient()
            .Product
            .GetProductsByTypeAsQueryable(CategoryTypes.Accessories);
        _allMoldings = await SmartService.GetClient()
            .Product
            .GetProductsByTypeAsQueryable(CategoryTypes.Moldings);
        @* _sortedCabinets = await SmartService.GetClient()
            .Product
            .GetSortedProducts(cabinets); *@
        _isLoading = false;
    }

    @* protected override void OnAfterRender(bool firstRender) {       
        if(_selectedProductType is not null) {
            ProductCategoryType productType = (ProductCategoryType)_selectedProductType;
            _allProducts = _productTypeDictionary[productType].AsQueryable();
        }
    } *@
    
    @* private Task PersistFormState() {
        ApplicationState?.PersistAsJson("products", _allProducts);
        //ApplicationState?.PersistAsJson("project", _project);
        return Task.CompletedTask;
    } *@

    @* private void OnProductTypeChanged(ChangeEventArgs e) {
        ProductCategoryType productType = (ProductCategoryType)Enum.Parse(typeof(ProductCategoryType), e.Value.ToString());
        _selectedProductType = productType;
    }
    *@

    private async void OnProductSelected(LibraryProduct product) {
        Logger.LogInformation($"Product Code selected: {product?.Name}");
        _selectedCabinet = product;
        _productFormView.Width = (float)product.Width;
        _productFormView.Height = (float)product.Height;
        _productFormView.Depth = (float)product.Depth;

        // Get StyleConfigurations for this product
        _doorStyles = SmartService.GetClient()
            .DoorStyle
            .GetDoorStylesForProduct(product)
            .AsQueryable();
        _selectedDoorStyle = null;

        _finishes = null;
        _selectedFinish = null;
        _drawerHardwares = null;
        _selectedDrawerHardware = null;
    }

    private void OnProductTypeChanged(ProductCategoryType e) {
        Logger.LogInformation($"Product Type selected: {e}");
        _selectedProductType = e;
    }
    
    private void OnStyleSelected(LibraryStyleConfiguration doorStyle) {
        _selectedDoorStyle = doorStyle;

        _finishes = SmartService.GetClient()
            .DoorStyle
            .GetAllowedFinishes(doorStyle!)
            .AsQueryable();
        Logger.LogInformation($"Finishes: {_finishes.Count()}");
        if(!String.IsNullOrWhiteSpace(_projectGroup.ProductFinishInterior)
            && _finishes.Contains(_projectGroup.ProductFinishInterior)
        ) {
            _selectedFinish = _projectGroup.ProductFinishInterior;
        } else {
            _selectedFinish = null;
        }
                

        _drawerHardwares = SmartService.GetClient()
            .DoorStyle
            .GetAllowedDrawerHardware(doorStyle!)
            .AsQueryable();
        Logger.LogInformation($"Drawer Hardwares: {_drawerHardwares.Count()}");
        if(!String.IsNullOrWhiteSpace(_projectGroup.ProductSlide)
            && _drawerHardwares.Contains(_projectGroup.ProductSlide)
        ) {
            _selectedDrawerHardware = _projectGroup.ProductSlide;
        } else {
            _selectedDrawerHardware = null;
        }
    }

    private async Task OnSubmitClick(){
        if (_editForm!.EditContext!.Validate()) {
            await GetProductPrice();
        } else {
            Logger.LogInformation("Validation failed!!!!");
        }
    }

    private void OnClearClick() {
        _productFormView = new();
        _selectedCabinet = null;
        _finishes = null;
        _selectedFinish = null;
        _selectedDoorStyle = null;
        _selectedDrawerHardware = null;
        _drawerHardwares = null;
        _productPrice = null;
    }

    private async Task GetProductPrice() {
        Logger.LogInformation("Get Product Price");
        _isSubmitting = true;
        _selectedCabinet.ProductFinishInterior = _selectedFinish;
        _selectedCabinet.ProductLeftSide = _leftEndFinished ? "Finished" : "Unfinished";
        _selectedCabinet.ProductRightSide = _rightEndFinished ? "Finished" : "Unfinished";
        _selectedCabinet.ProductSlide = _selectedDrawerHardware;
        _selectedCabinet.ProductDoorSwing = "Left";
        _selectedCabinet.ProductDoorStyle = _selectedDoorStyle.Name;
        _selectedCabinet.Width = _productFormView.Width;
        _selectedCabinet.Height = _productFormView.Height;
        _selectedCabinet.Depth = _productFormView.Depth;
        _selectedCabinet.Quantity = _productFormView.Quantity;
        Logger.LogInformation("Product Finish: "+_selectedFinish);
        Logger.LogInformation("Product Drawer Hardware: "+_selectedDrawerHardware);
        var priceRes = await SmartService.GetClient()
            .Product
            .GetProductPrice(
                _selectedCabinet!,
                _productFormView.Width,
                _productFormView.Height,
                _productFormView.Depth,
                _selectedDoorStyle!.Name
            );
        _productPrice = priceRes.Item1;
        _priceError = priceRes.Item2;
        _isSubmitting = false;
        Logger.LogInformation("Product Price: "+_productPrice);
        Logger.LogInformation("Product Resporse: "+priceRes.Item2);
    } 

    private async Task AddProductToProjectGroup() {
        _selectedCabinet.Quantity = _productFormView.Quantity;
        var product = await SmartService.GetClient()
            .ProjectGroup
            .AddProductToProjectGroup(
                _project,
                _projectGroup,
                _selectedCabinet
            )
            ?? throw new InvalidOperationException("Product not added to Project Group"); 


        product.PriceSubTotal = product.PriceLibrary * product.Quantity;
        product.PriceTotalTaxOut = product.PriceSubTotal;

        var projectGroupProducts = SmartService.GetClient()
            .ProjectGroup
            .GetProjectGroupProducts(
                _projectGroup.LinkID,
                _project
            );
        _projectGroup.PriceSubTotal = projectGroupProducts.Sum(p => p.PriceSubTotal);
        _projectGroup.PriceTotalTaxOut = projectGroupProducts.Sum(p => p.PriceTotalTaxOut); 

        IList<ProjectGroup> projectGroupList = _project.ProjectGroups;
        _project.PriceSubTotal = projectGroupList.Sum(pg => pg.PriceSubTotal);
        _project.PriceTotalTaxOut = projectGroupList.Sum(pg => pg.PriceTotalTaxOut);

        
        await SmartService.GetClient()
            .Project
            .SaveProject(_project);
        NavigationManager
            .NavigateTo($"/quotes/{ProjectLinkId}/rooms/{ProjectGroupLinkId}");
    }

    private async Task<string> GetImageSource() {
        var b64 = await SmartService.GetClient()
            .Product
            .GetProductGraphic(_selectedCabinet);
        return $"data:image/png;base64,{b64}";
    }
}