@inject ILogger<ContactForm> Logger
@inject IMapper Mapper
@inject SmartOrderApi OrderApi
 
@namespace SmartOrder.Shared.Components


<EditForm 
    @ref=@_editForm
    Model=@Contact
    FormName="contact-form"
    class="flex flex-col"
>
    <ObjectGraphDataAnnotationsValidator />
    
    <DmnSectionHeader 
        Title="New Contact"
        TitleClass="!text-xl"
        SubmitButtonText=@((_isNewContact ? "Add" : "Update"))
        CancelButtonText=@((_isNewContact ? "Cancel" : "Delete"))
        IsLoading=@_isSubmitting
        OnSubmitClick=@OnSubmitClick
        OnCancelClick=@OnCancelClick
    />

    <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6">
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Contact Name"
                @bind-Value=@Contact!.DisplayName
            />
        </div>
        <div class="sm:col-span-3"></div>
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Email Address" 
                @bind-Value=@Contact!.DefaultEmail.DisplayAs
            />
        </div>
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Phone Number" 
                @bind-Value=@Contact!.DefaultPhone.DisplayAs
            />
        </div>
    </div>
</EditForm>


@code {

    [Parameter]
    public Contact? Contact { get; set; }
    private ContactFormView? ContactFormView { get; set; }
    
    [Parameter]
    public ShipLocation? ShipLocation { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<ContactFormView> OnChange { get; set; }
        
 
    private EditForm _editForm;
    private bool _isSubmitting = false;
    private bool _isNewContact = true;
    private bool IsAddingShipLocation { get; set; } = false;
    private IList<Contact> Contacts { get; set; }

    protected override void OnParametersSet() {
        if(Contact != null) {
            
        }
        Contact ??= new("");
    }

    protected override async Task OnInitializedAsync() {
        
        Contacts = await OrderApi.Contact.GetContacts();
    }

    private async Task OnSubmitClick() {
        if (!_editForm!.EditContext!.Validate()) {
            return;
        }
        await UpsertLocation();
    }

    private void OnCancelClick()
    {
        OnCancel.InvokeAsync();
    }

    private async Task UpsertLocation() {
        _isSubmitting = true;
        Logger.LogInformation($"Upserting new contact: {Contact!.DisplayName}");
        if(_isNewContact) {
            await OrderApi!
                .Contact
                .AddContact(
                    Contact.DisplayName,
                    Contact.DefaultPhone.DisplayAs,
                    Contact.DefaultEmail.DisplayAs,
                    ShipLocation!
                );
        } else {
            await OrderApi!
                .Contact
                .UpdateContact(Contact!);
        }
        Logger.LogInformation($"Upserted new contact: {Contact!.DisplayName}");
        //await OnChange.InvokeAsync(newContact);
        _isSubmitting = false;
    }
}
