@namespace SO.Components.Projects
@inject SmartService SmartService
@inject ILogger<ShipLocationEditableComboBox> Logger
@inject IMapper Mapper
@inherits InputBase<ShipLocationFormView>

<div class="flex flex-col">
  @if(_isLoading) {
    <div class="flex justify-center">
        <Spinner Class="w-4 h-4" />
        <span>Loading available shipping locations...</span>
    </div>
  } else {
    <div class="flex flex-col">
      @if(_shipLocations.Any()) {
        <DmnComboBox 
          Data=@_shipLocations
          @bind-Value:get=@_currentShipLocation
          @bind-Value:set=OnShipLocationChanged
          TextFieldName=@nameof(ShipLocation.LocationName)
          Label="Select Shipping Location"
          LabelClass="text-xl font-semibold"
          Class="pb-0"
        />
      } else {
        <span class="text-lg font-semibold">No available shipping addresses</span>
      }
      <ValidationMessage For=@(() => Project.ProjectShipLocation) />
      <a 
        @onclick=@OnAddressClick
        class="
          dmn-link
          text-left
          my-2
      ">
        Add New Address
      </a>
      @if(_currentShipLocation != null) {
        <div class="mt-6"></div>
        <ShipLocationForm 
          @bind-Value:get=@Value
          @bind-Value:set=OnShipLocationViewChanged
        />
      }
    </div>
    <div class="mb-4"></div>
  } 
</div>


@code {

  [Parameter]
  public ProjectFormView? Project { get; set; } = default!;

  private bool _isLoading = true;

  private IQueryable<ShipLocation> _shipLocations = default!;
  private ShipLocation? _currentShipLocation;

  private bool _isAddingShipLocation = false;
    
  @* protected override void OnParametersSet() {
    _currentShipLocation = Mapper.Map<ShipLocation>(Value);     
  } *@

  protected override void OnInitialized() {
    if(Value == null) {
      Value = new();
    }
    _currentShipLocation = Mapper.Map<ShipLocation>(Value);
  }

  protected override async Task OnInitializedAsync() {
    _shipLocations = await SmartService.GetClient()
      .ShipLocation
      .GetShipLocationsAsQueryable();
    _isLoading = false;
  }
  
  protected override bool TryParseValueFromString(
      string? value, 
      out ShipLocationFormView shipLocation,
      out string? validationErrorMessage) {
      throw new NotImplementedException();
  }

  @* private void OnAddressChange(object obj) {
    ShipLocation? shipLocation = obj as ShipLocation;
    Logger.LogInformation($"OnAddressChange: {shipLocation?.LocationName}");
    Value = shipLocation!;
    StateHasChanged();
  }

  void OnFieldChanged(object? sender, FieldChangedEventArgs e) {
    StateHasChanged();
  } *@

  private async Task OnAddressClick(MouseEventArgs e) {
    var location = new ShipLocation();
    _currentShipLocation = location;
    var locationView = Mapper.Map<ShipLocationFormView>(location);
    Value = locationView;
    await ValueChanged.InvokeAsync(Value);
    //_isAddingShipLocation = true;
    //StateHasChanged();
  }
  
  @* private void OnShipLocationCancel() {
    _isAddingShipLocation = false;
    //StateHasChanged();
  }

  private void OnShipLocationCreate(ShipLocationView shipLocation) {
    Project!.ProjectShipLocation = shipLocation;
    _isAddingShipLocation = false;
    StateHasChanged();
  }      
*@
  private async Task OnShipLocationChanged(ShipLocation shipLocation) {
    _currentShipLocation = shipLocation;
    Value = Mapper.Map<ShipLocationFormView>(shipLocation);
    await ValueChanged.InvokeAsync(Value);
  }

  private async Task OnShipLocationViewChanged(ShipLocationFormView shipLocationView) {
    ShipLocation? shipLocation = null;
    if(!String.IsNullOrEmpty(shipLocationView.LocationName))  {
      shipLocation = await SmartService!.GetClient()
        .ShipLocation
        .GetShipLocationById(shipLocationView.LinkID);
    } else {
      shipLocation = Mapper.Map<ShipLocation>(shipLocationView);
    }
    _currentShipLocation = shipLocation;
    Value = shipLocationView;
    await ValueChanged.InvokeAsync(Value);
    _shipLocations = await SmartService.GetClient()
      .ShipLocation
      .GetShipLocationsAsQueryable();
    StateHasChanged();
  }
}