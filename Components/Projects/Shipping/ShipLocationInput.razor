@namespace SO.Components.Projects
@inject SmartOrderApi OrderApi
@inject ILogger<ShippingOptions> Logger
@inherits InputBase<ShipLocation>

<div class="flex flex-col">
  <div class="border-t border-gray-300 mb-3 mt-3"></div>

  <div class="flex flex-col">
      <DmnComboBox 
        Data=@_shipLocations
        bind-Value=@Value
        TextFieldName=@nameof(ShipLocation.LocationName)
        Label="Shipping Location"
        Class="pb-0"
      />

    @if(!_isAddingShipLocation) {
      <span 
        @onclick=@OnAddressClick
        class="
          text-sky-500
          text-right
          font-semibold
          hover:text-sky-400
          cursor-pointer
          pt-0.5
      ">
        Add New Address
      </span>
    }
  </div>
  <div class="mb-4"></div>

  @if(Value != null || _isAddingShipLocation) {
    <ShipLocationForm 
      ShipLocation=@Value
    />
  } else {
      <span>No Current Shipping Address</span>
  }
</div>


@code {
  [Parameter]

  @* [Parameter]
  public ProjectFormView? Project { get; set; } *@

  //private ProjectFormView? _project { get; set; }
  //private ShipLocationView? _shipLocation { get; set; }

  [CascadingParameter]
  public EditContext? EditContext { get; set; }

  private IQueryable<ShipLocation>? _shipLocations;

  private bool _isAddingShipLocation = false;
    

  protected override async Task OnInitializedAsync() {
    var shipLocations = await OrderApi
      .ShipLocation
      .GetShipLocations();
    _shipLocations = shipLocations.AsQueryable();
    EditContext!.OnFieldChanged += OnFieldChanged;
  }

  protected override bool TryParseValueFromString(
      string? value, 
      out ShipLocation shipLocation,
      out string validationErrorMessage) {
      throw new NotImplementedException();
  }

  private void OnAddressChange(object obj) {
    ShipLocation? shipLocation = obj as ShipLocation;
    Logger.LogInformation($"OnAddressChange: {shipLocation?.LocationName}");
    Value = shipLocation!;
    StateHasChanged();
  }

  void OnFieldChanged(object? sender, FieldChangedEventArgs e) {
    StateHasChanged();
  }

  private void OnAddressClick(MouseEventArgs e) {
    _isAddingShipLocation = true;
    //StateHasChanged();
  }
  
  @* private void OnShipLocationCancel() {
    _isAddingShipLocation = false;
    //StateHasChanged();
  }

  private void OnShipLocationCreate(ShipLocationView shipLocation) {
    Project!.ProjectShipLocation = shipLocation;
    _isAddingShipLocation = false;
    StateHasChanged();
  }      

 private void OnShipLocationChanged(ChangeEventArgs e) {
    Logger.LogInformation($"ShipLocationChanged??????????");
    //_currentShipLocationLinkId = e.Value?.ToString();
    
    //StateHasChanged();
  }  *@
}