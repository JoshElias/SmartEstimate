@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering(true)]
@inject IMapper Mapper
@inject ILogger<ShipLocationForm> Logger
@inject SmartService SmartService
@namespace SO.Components.Projects
@inherits InputBase<ShipLocationFormView>

<EditForm 
    @ref=@_editForm
    Model=@Value
    FormName="ship-location-form"
    class="
        flex flex-col
        p-4 border-2 rounded-lg border-gray-300
    "
>
    <ObjectGraphDataAnnotationsValidator />
    
    <DmnSectionHeader 
        Title="Edit Shipping Location"
        TitleClass="!text-xl3"
        SubmitButtonText=@_submitButtonText
        CancelButtonText=@_cancelButtonText
        Size="sm"
        IsLoading=@_isSubmitting
        OnSubmitClick=@OnSubmitClick
        OnCancelClick=@OnCancelClick
    />
    <div class="
        mt-6 mb-8
    ">
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Location Name"
                @bind-Value=@Value.LocationName
            />
        </div>

        <div class="grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6">
            <h2 class="
                col-span-full
                text-lg font-semibold
            ">
                Shipping Address
            </h2>
            <div class="col-span-full">
                <DmnInputText 
                    Label="Street Address" 
                    @bind-Value=@Value.Address.Street
                />
            </div>
                <div class="col-span-full">
                <DmnInputText 
                    Label="Address Line 2" 
                    @bind-Value=@Value.Address.StreetLine2
                />
            </div>
            <div class="sm:col-span-2 sm:col-start-1">
                <DmnInputText 
                    Label="City" 
                    @bind-Value=@Value.Address.City
                />
            </div>
            <div class="sm:col-span-2">
                <DmnInputText 
                    Label="Province" 
                    @bind-Value=@Value.Address.StateProvince
                />
            </div>
            <div class="sm:col-span-2">
                <DmnInputText 
                    Label="Postal Code" 
                    @bind-Value=@Value.Address.PostalCode
                />
            </div>
        </div>
        <div class="sm:col-span-3"></div>
        <div class="
            col-span-full 
            border-2 rounded-lg border-solid border-gray-300
            p-4
        ">
            <h3 class="text-2xl font-semibold mb-4">Shipping Contact</h3>
            <ContactEditableComboBox @bind-Value=@_currentContact />
            <ValidationMessage For=@(() => Value.Contact) /> 
        </div>
    </div>
</EditForm>


@code {
    @* [Parameter]
    public EventCallback<ShipLocation> ShipLocationSelected { get; set; } *@

    private EditForm _editForm = default!;
    private bool _isSubmitting = false;
    private string _submitButtonText => !Value.IsPersisted ? "Create" : "Update";
    private string _cancelButtonText => !Value.IsPersisted ? "Cancel" : "Delete";
    private ContactFormView _currentContact = default!;
    
    protected override void OnParametersSet() {
        if(Value == null) {
            Value = new();
        }
        @* if(Value.Contacts == null) {
            Value.Contacts = new List<ContactFormView>();
        }
        if(!Value.Contacts.Any()) {
            Value.Contacts.Add(new ContactFormView());
        } *@
        _currentContact = Value.Contact;

        @* if(Value.Addresses == null) {
            Value.Addresses = new List<AddressFormView>();
        }
        if(!Value.Addresses.Any()) {
            Value.Addresses.Add(new AddressFormView());
        } *@
        
        @* if(_editForm != null) {
            bool isValid = _editForm.EditContext.Validate();
        } *@
        //_editForm.EditContext.Validate();
    }

    @* protected override async Task OnParametersSetAsync() {
        if(_editForm != null) {
            bool isValid = _editForm.EditContext.Validate();
        }

    } *@

    @* protected override void OnInitialized() {
        _editForm.EditContext.Validate();
    } *@
    
    protected override bool TryParseValueFromString(
        string? value, 
        out ShipLocationFormView shipLocation,
        out string validationErrorMessage) {
        throw new NotImplementedException();
    }

    private async Task OnSubmitClick() {
        if (!_editForm!.EditContext!.Validate()) {
            return;
        }

        if(!Value.IsPersisted) {
            await AddLocation();
        } else {
            await UpdateLocation();
        }
    }

    private void OnCancelClick() {
    }

    private async Task AddLocation() {
        _isSubmitting = true;
        Logger.LogInformation($"Creating new Ship Location: {Value.LocationName}");
        var newLocation = await SmartService!.GetClient()
            .ShipLocation
            .AddShipLocation(
                Value.LocationName,
                Value.Address.Street,
                Value.Address.StreetLine2,
                Value.Address.City,
                Value.Address.StateProvince,
                Value.Address.PostalCode,
                Value.Address.AddressNotes
            );
        Value = Mapper.Map<ShipLocationFormView>(newLocation);

        var newContact = await SmartService!.GetClient()
            .ShipLocation
            .AddContact(
                newLocation,
                _currentContact.DisplayName,
                _currentContact.Phone,
                _currentContact.Email
            );
        _currentContact = Mapper.Map<ContactFormView>(newContact);

        await ValueChanged.InvokeAsync(Value);
        Logger.LogInformation($"Created new Ship Location: {Value.LocationName}");
        _isSubmitting = false;
    }
    
    private async Task UpdateLocation() {
        _isSubmitting = true;
        Logger.LogInformation($"Updating project: {Value.LocationName}");
        @* ShipLocationView updatedLocation = await OrderApi!
            .ShipLocation
            .UpdateShipLocation(ShipLocation!);
        Logger.LogInformation($"Updated project: {updatedLocation.LocationName}");
        await OnChange.InvokeAsync(updatedLocation); *@
        _isSubmitting = false;
    }
}
