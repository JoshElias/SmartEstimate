@inject IMapper Mapper
@inject ILogger<ShipLocationForm> Logger
@inject SmartOrderApi OrderApi
@namespace SO.Components.Projects
@inherits InputBase<ShipLocationFormView>

<EditForm 
    @ref=@_editForm
    Model=@Value
    FormName="ship-location-form"
    class="flex flex-col"
>
    <ObjectGraphDataAnnotationsValidator />
    
    <DmnSectionHeader 
        Title="New Shipping Location"
        TitleClass="!text-xl2"
        SubmitButtonText=@_submitButtonText
        CancelButtonText=@_cancelButtonText
        Size="sm"
        IsLoading=@_isSubmitting
        OnSubmitClick=@OnSubmitClick
        OnCancelClick=@OnCancelClick
    />

    <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6">
        <div class="sm:col-span-3">
            <DmnInputText 
                Label="Location Name"
                @bind-Value=@Value.LocationName
            />
        </div>
        <div class="sm:col-span-3"></div>
        <div class="
            col-span-full 
            border-2 rounded-lg border-solid border-gray-300
            p-4
        ">
            <h3 class="text-xl font-semibold">Shipping Contact</h3>
            <ContactEditableComboBox @bind-Value=@Value.Contacts[0]/>
        </div>
        <div class="col-span-full">
            <DmnInputText 
                Label="Street Address" 
                @bind-Value=@Value.Addresses[0].Street
            />
        </div>
            <div class="col-span-full">
            <DmnInputText 
                Label="Address Line 2" 
                @bind-Value=@Value.Addresses[0].StreetLine2
            />
        </div>
        <div class="sm:col-span-2 sm:col-start-1">
            <DmnInputText 
                Label="City" 
                @bind-Value=@Value.Addresses[0].City
            />
        </div>
        <div class="sm:col-span-2">
            <DmnInputText 
                Label="Province" 
                @bind-Value=@Value.Addresses[0].StateProvince
            />
        </div>
        <div class="sm:col-span-2">
            <DmnInputText 
                Label="Postal Code" 
                @bind-Value=@Value.Addresses[0].PostalCode
            />
        </div>
    </div>
</EditForm>


@code {
    private EditForm _editForm = default!;
    private bool _isSubmitting = false;
    private bool _isNewLocation = true;
    private string _submitButtonText => _isNewLocation ? "Add" : "Update";
    private string _cancelButtonText => _isNewLocation ? "Cancel" : "Delete";


    protected override void OnParametersSet() {
        _isNewLocation = string.IsNullOrEmpty(Value.LocationName);
        if (_isNewLocation) {
            Value = new ShipLocationFormView("");
            Value.Contacts.Add(new ContactFormView(""));
            Value.Addresses.Add(new AddressFormView(""));
        }
    }
    
    protected override bool TryParseValueFromString(
        string? value, 
        out ShipLocationFormView shipLocation,
        out string validationErrorMessage) {
        throw new NotImplementedException();
    }

    private async Task OnSubmitClick() {
        if (!_editForm!.EditContext!.Validate()) {
            return;
        }

        if(_isNewLocation) {
            await AddLocation();
        } else {
            await UpdateLocation();
        }
    }

    private void OnCancelClick() {
    }

    private async Task AddLocation() {
        _isSubmitting = true;
        Logger.LogInformation($"Creating new project: {Value.LocationName}");
        var newLocation = await OrderApi
            .ShipLocation
            .AddShipLocation(
                Value.LocationName,
                Value.Addresses[0].Street,
                Value.Addresses[0].StreetLine2,
                Value.Addresses[0].City,
                Value.Addresses[0].StateProvince,
                Value.Addresses[0].PostalCode,
                Value.Addresses[0].AddressNotes
            );
        Value = Mapper.Map<ShipLocationFormView>(newLocation);
        await ValueChanged.InvokeAsync(Value);
        Logger.LogInformation($"Created new project: {Value.LocationName}");
        _isNewLocation = false;
        _isSubmitting = false;
    }
    
    private async Task UpdateLocation() {
        _isSubmitting = true;
        Logger.LogInformation($"Updating project: {Value.LocationName}");
        @* ShipLocationView updatedLocation = await OrderApi!
            .ShipLocation
            .UpdateShipLocation(ShipLocation!);
        Logger.LogInformation($"Updated project: {updatedLocation.LocationName}");
        await OnChange.InvokeAsync(updatedLocation); *@
        _isSubmitting = false;
    }
}
