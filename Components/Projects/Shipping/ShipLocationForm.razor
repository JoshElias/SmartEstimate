@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering(true)]
@inject IMapper Mapper
@inject ILogger<ShipLocationForm> Logger
@inject SmartService SmartService
@namespace SO.Components.Projects
@inherits InputBase<string>


@if(_isLoading) {
    <div class="flex flex-col justify-center"> 
        <span class="mb-8">Loading current Ship Location...</span>
        <Spinner Class="w-8 h-8" />
    </div>
} else {
    <EditForm 
        @ref=@_editForm
        Model=@_shipLocationForm
        FormName="ship-location-form"
        class="
            flex flex-col
            p-4 border-2 rounded-lg border-gray-300
        "
    >
        <ObjectGraphDataAnnotationsValidator />
        
        <DmnSectionHeader 
            Title=@_title
            TitleClass="text-2xl"
            SubmitButtonText=@_submitButtonText
            CancelButtonText=@_cancelButtonText
            Size="sm"
            IsLoading=@_isSubmitting
            OnSubmitClick=@OnSubmitClick
            OnCancelClick=@OnCancelClick
        />
        <div class="
            mt-6 mb-8
        ">
            <div class="sm:col-span-3">
                <DmnInputText 
                    Label="Location Name"
                    @bind-Value=@_shipLocationForm.LocationName
                />
            </div>

            <div class="grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6">
                <h2 class="
                    col-span-full
                    text-lg font-semibold
                ">
                    Shipping Address
                </h2>
                <div class="col-span-full">
                    <DmnInputText 
                        Label="Street Address" 
                        @bind-Value=@_shipLocationForm.Address.Street
                    />
                </div>
                    <div class="col-span-full">
                    <DmnInputText 
                        Label="Address Line 2" 
                        @bind-Value=@_shipLocationForm.Address.StreetLine2
                    />
                </div>
                <div class="sm:col-span-2 sm:col-start-1">
                    <DmnInputText 
                        Label="City" 
                        @bind-Value=@_shipLocationForm.Address.City
                    />
                </div>
                <div class="sm:col-span-2">
                    <DmnInputText 
                        Label="Province" 
                        @bind-Value=@_shipLocationForm.Address.StateProvince
                    />
                </div>
                <div class="sm:col-span-2">
                    <DmnInputText 
                        Label="Postal Code" 
                        @bind-Value=@_shipLocationForm.Address.PostalCode
                    />
                </div>
            </div>
            <div class="sm:col-span-3"></div>
        </div>
        @if(_currentShipLocation != null) {
            <div class="
                col-span-full 
                border-2 rounded-lg border-solid border-gray-300
                p-4
            ">
                <h3 class="text-2xl font-semibold mb-4">Current Shipping Contact</h3>
                <ContactEditableComboBox 
                    ShipLocation=_currentShipLocation
                    @bind-Value:get=@_shipLocationForm.ContactLinkID
                    @bind-Value:set=@OnContactSelected
                />
                <ValidationMessage For=@(() => _shipLocationForm.ContactLinkID) /> 
            </div>
        }
    </EditForm>
}


@code {
    @* [Parameter]
    public EventCallback<ShipLocation> ShipLocationSelected { get; set; } *@

    private ShipLocationFormView _shipLocationForm = default!;

    private EditForm _editForm = default!;
    private bool _isLoading = true;
    private bool _isSubmitting = false;
    private string _title => _shipLocationForm.IsPersisted ? "Current Shipping Location" : "New Shipping Location";
    private string _submitButtonText => String.IsNullOrEmpty(Value) ? "Create" : "Update";
    private string _cancelButtonText => String.IsNullOrEmpty(Value) ? "Cancel" : "Delete";
    private ShipLocation? _currentShipLocation = null;

    protected override void OnParametersSet() {
        if(String.IsNullOrEmpty(Value)) {
            _shipLocationForm = new();
        }
        @* if(Value.Contacts == null) {
            Value.Contacts = new List<ContactFormView>();
        }
        if(!Value.Contacts.Any()) {
            Value.Contacts.Add(new ContactFormView());
        } *@
        @* _currentContact = Value.Contact; *@

        @* if(Value.Addresses == null) {
            Value.Addresses = new List<AddressFormView>();
        }
        if(!Value.Addresses.Any()) {
            Value.Addresses.Add(new AddressFormView());
        } *@
        
        @* if(_editForm != null) {
            bool isValid = _editForm.EditContext.Validate();
        } *@
        //_editForm.EditContext.Validate();
    }

    protected override async Task OnParametersSetAsync() {
        if(!String.IsNullOrEmpty(Value)) {
            _currentShipLocation = await SmartService!.GetClient()
                .ShipLocation
                .GetShipLocationById(Value);
            _shipLocationForm = Mapper.Map<ShipLocationFormView>(_currentShipLocation);
        } else {
            _currentShipLocation = null;
        }
        _isLoading = false;
    }

    @* protected override void OnInitialized() {
        _editForm.EditContext.Validate();
    } *@
    
    protected override bool TryParseValueFromString(
        string? value, 
        out string shipLocationLinkId,
        out string validationErrorMessage) {
        throw new NotImplementedException();
    }

    private async Task OnSubmitClick() {
        if (!_editForm!.EditContext!.Validate()) {
            return;
        }

        if(String.IsNullOrEmpty(Value)) {
            await AddLocation();
        } else {
            await UpdateLocation();
        }
    }

    private async Task OnCancelClick() {
        if(!String.IsNullOrEmpty(Value)) {
            await DeleteLocation();
        }
    }

    private async Task AddLocation() {
        _isSubmitting = true;
        var newLocation = await SmartService!.GetClient()
            .ShipLocation
            .AddShipLocation(
                _shipLocationForm.LocationName,
                _shipLocationForm.Address.Street,
                _shipLocationForm.Address.StreetLine2,
                _shipLocationForm.Address.City,
                _shipLocationForm.Address.StateProvince,
                _shipLocationForm.Address.PostalCode,
                _shipLocationForm.Address.AddressNotes
            );
        _currentShipLocation = newLocation;
        Value = newLocation.LinkID;

        @* var newContact = await SmartService!.GetClient()
                .ShipLocation
                .AddContact(
                    newLocation,
                    _currentContact.DisplayName,
                    _currentContact.Phone,
                    _currentContact.Email
                );
        _currentContact = Mapper.Map<ContactFormView>(newContact); *@

        await ValueChanged.InvokeAsync(Value);
        _isSubmitting = false;
    }
    
    private async Task UpdateLocation() {
        _isSubmitting = true;
        var location = await SmartService!.GetClient()
            .ShipLocation
            .GetShipLocationById(Value);
        Logger.LogInformation($"Updating project: {location.LocationName}");
        Mapper.Map(_shipLocationForm, location);
        await SmartService!.GetClient()
            .ShipLocation
            .UpdateShipLocation(
                location
            );

        @* Contact contact = null;
        if(location.Contacts != null || String.IsNullOrEmpty(location.Contacts[0].DisplayName)) {
            contact = await SmartService!.GetClient()
                .ShipLocation
                .AddContact(
                    location,
                    _currentContact.DisplayName,
                    _currentContact.Phone,
                    _currentContact.Email
                ); 
            
        } else {
            contact = await SmartService!.GetClient()
                .Contact
                .GetShipLocationContactById(
                    Value.Contact.LinkID,
                    location
                );        
            Mapper.Map(_currentContact, contact);
            await SmartService!.GetClient()
                .Contact
                .UpdateContact(
                    contact
                );
        }
        _currentContact = Mapper.Map<ContactFormView>(contact); *@

        _isSubmitting = false;
    }

    private async Task OnContactSelected(string contactViewLinkId) {
        if(!String.IsNullOrEmpty(contactViewLinkId)) {
            var contact = await SmartService!.GetClient()
                .Contact
                .GetShipLocationContactById(contactViewLinkId, _currentShipLocation)
                ?? throw new InvalidOperationException("Contact not found");
            _shipLocationForm.ContactLinkID = contact.LinkID;
        } else {
            _shipLocationForm.ContactLinkID = "";
        }
    }

    private async Task DeleteLocation() {
        _isSubmitting = true;
        await SmartService!.GetClient()
            .ShipLocation
            .DeleteShipLocationById(Value);
        Value = "";
        await ValueChanged.InvokeAsync(Value);
        @* await OnChange.InvokeAsync(Value); *@
        _isSubmitting = false;
    }
}
